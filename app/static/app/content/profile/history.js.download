var IASHistoryExtension=function(options){options=jQuery.extend({},this.defaults,options);this.ias=null;this.prevSelector=options.prev;this.prevUrl=null;this.listeners={prev:new IASCallbacks()};this.onPageChange=function(pageNum,scrollOffset,url){var state={};if(!window.history||!window.history.replaceState){return;}
history.replaceState(state,document.title,url);};this.onScroll=function(currentScrollOffset,scrollThreshold){var firstItemScrollThreshold=this.getScrollThresholdFirstItem();if(!this.prevUrl){return;}
currentScrollOffset-=this.ias.$scrollContainer.height();if(currentScrollOffset<=firstItemScrollThreshold){this.prev();}};this.getPrevUrl=function(container){if(!container){container=this.ias.$container;}
return jQuery(this.prevSelector,container).last().attr('href');};this.getScrollThresholdFirstItem=function(){var $firstElement;$firstElement=this.ias.getFirstItem();if(0===$firstElement.size()){return-1;}
return($firstElement.offset().top);};this.renderBefore=function(items,callback){var ias=this.ias,$firstItem=ias.getFirstItem(),count=0;ias.fire('render',[items]);jQuery(items).hide();$firstItem.before(items);jQuery(items).fadeIn(400,function(){if(++count<items.length){return;}
ias.fire('rendered',[items]);if(callback){callback();}});};return this;};IASHistoryExtension.prototype.initialize=function(ias){var self=this;this.ias=ias;jQuery.extend(ias.listeners,this.listeners);ias.prev=function(){return self.prev();};this.prevUrl=this.getPrevUrl();};IASHistoryExtension.prototype.bind=function(ias){var self=this;ias.on('pageChange',jQuery.proxy(this.onPageChange,this));ias.on('scroll',jQuery.proxy(this.onScroll,this));ias.on('ready',function(){var currentScrollOffset=ias.getCurrentScrollOffset(ias.$scrollContainer),firstItemScrollThreshold=self.getScrollThresholdFirstItem();currentScrollOffset-=ias.$scrollContainer.height();if(currentScrollOffset<=firstItemScrollThreshold){self.prev();}});};IASHistoryExtension.prototype.prev=function(){var url=this.prevUrl,self=this,ias=this.ias;if(!url){return false;}
ias.unbind();var promise=ias.fire('prev',[url]);promise.done(function(){ias.load(url,function(data,items){self.renderBefore(items,function(){self.prevUrl=self.getPrevUrl(data);ias.bind();if(self.prevUrl){self.prev();}});});});promise.fail(function(){ias.bind();});return true;};IASHistoryExtension.prototype.defaults={prev:".prev"};