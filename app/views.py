"""
Definition of views.
"""

from django.shortcuts import render, redirect
from django.http import HttpRequest
from django.template import RequestContext
from datetime import datetime
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django_ajax.decorators import ajax
from app.models import Opinion, CorrectionData, StocksPrices, LabledCounter, StockCounter, RelevancyCounter, SentimentCounter
from django.utils import timezone
from Filter.Filter import Filter
from bs4 import BeautifulSoup
from django.db.models import Sum
import urllib
import json
from TwitterCrawler.TwitterCrawler import *
import os
import threading
import django_crontab
#from pytz import timezone
from dateutil.parser import parse
from requests_oauthlib import OAuth1
import requests
import urllib.parse as urllib_parse
from twitter import *

request_token_url = 'https://api.twitter.com/oauth/request_token'
access_url = 'https://api.twitter.com/oauth/access_token'
authenticate_url = 'https://api.twitter.com/oauth/authenticate'
base_authorization_url = 'https://api.twitter.com/oauth/authorize'

consumerKey="xNRGvHoz9L4xKGP28m7qbg"
consumerSecret="oFv4dhBekboNg7pKa2BS0zztHqusr91SIdmKErDaycI"
accessToken="1846277677-36dTObVu6LfVDSuU72M3HCTCv2g50dYoTxzuAOZ"
accessTokenSecret="Yu4lZdbebuO3tpof6xYzi4Qy7HZL4aL3YQiCYgsro"
resource_owner_key = ""
resource_owner_secret = ""

synonyms = {'استثمار': 'البنك السعودي للاستثمار',
'السعودى الهولندى': 'البنك السعودي الهولندي',
'السعودى الفرنسى': 'البنك السعودي الفرنسي',
'ساب': 'ساب للتكافل',
'العربى الوطنى': 'البنك العربي الوطني',
'سامبا': 'مجموعة سامبا المالية',
'تاسي': 'تاسي',
'الرياض': 'بنك الرياض',
'الجزيرة': 'بنك الجزيرة',
'الراجحي': 'مصرف الراجحي',
'البلاد': 'بنك البلاد',
'الإنماء': 'مصرف الإنماء',
'كيمانول': 'شركة تكوين المتطورة للصناعات',
'بتروكيم ': 'شركة الصحراء للبتروكيماويات',
'سابك': 'شركة الصناعات الكيميائية الأساسية',
'سافكو': 'مجموعة أسترا الصناعية',
'التصنيع': 'شركة مجموعة السريع التجارية الصناعية',
'اللجين': 'شركة الحسن غازي إبراهيم شاكر',
'نماء للكيماويات': 'شركة نماء للكيماويات',
'المجموعة السعودية': 'المجموعة السعودية للإستثمار الصناعي',
'الصحراء للبتروكيماويات': 'شركة الصحراء للبتروكيماويات',
'ينساب': 'ينساب',
'أسمنت حائل': 'شركة أسمنت حائل',
'أسمنت نجران ': 'شركة أسمنت نجران',
'اسمنت المدينة ': 'شركة اسمنت المدينة',
'اسمنت ام القرى': 'شركة اسمنت ام القرى',
'اسمنت الشمالية ': 'شركة أسمنت المنطقة الشمالية',
'الاسمنت العربية ': 'شركة الاسمنت العربية',
'اسمنت اليمامة ': 'شركة اسمنت اليمامة',
'اسمنت السعوديه ': 'شركة الأسمنت السعودية',
'اسمنت القصيم ': 'شركة اسمنت القصيم',
'اسمنت الجنوبيه ': 'شركة اسمنت المنطقة الجنوبيه',
'اسمنت ينبع': 'شركة اسمنت ينبع',
'اسمنت الشرقية ': 'شركة اسمنت المنطقة الشرقية',
'اسمنت تبوك ': 'شركة اسمنت تبوك',
'اسمنت الجوف ': 'شركة اسمنت الجوف',
'أسواق ع العثيم ': 'شركة أسواق عبدالله العثيم',
'المواساة': 'شركة المواساة للخدمات الطبية',
'إكسترا': '',
'دله الصحية': 'شركة دله للخدمات الصحية القابضة',
'رعاية': 'الشركة الوطنية للرعاية الطبية',
'أسواق المزرعة': 'الشركة السعودية للتسويق',
'ساسكو': 'ساسكو',
'ثمار': 'ثمار',
'مجموعة فتيحي ': 'مجموعة فتيحي القابضة',
'جرير': 'شركة جرير للتسويق',
'الدريس': 'شركة الدريس للخدمات البترولية و النقليات',
'الحكير': 'شركة فواز عبدالعزيز الحكير وشركاه',
'الحمادي':'شركة الحمادي للتنمية والاستثمار',
'الخليج للتدريب ': 'شركة الخليج للتدريب و التعليم',
'الغاز والتصنيع ': 'شركة الغاز والتصنيع الاهلية',
'كهرباء السعودية ': 'الشركة السعودية للكهرباء',
'مجموعة صافولا': 'مجموعة صافولا',
'الغذائية': 'الغذائية',
'سدافكو': 'الشركة السعودية لمنتجات الألبان والأغذية (سدافكو)',
'المراعي': 'شركة المراعي',
'أنعام القابضة ': 'شركة مجموعة أنعام الدولية القابضة',
'حلواني إخوان': 'حلواني إخوان',
'هرفي للأغذية': 'شركة هرفي للخدمات الغذائية',
'التموين': 'شركة الخطوط السعودية للتموين',
'نادك': 'الشركة الوطنية للتنمية الزراعية',
'القصيم الزراعيه': 'شركة القصيم الزراعية',
'تبوك الزراعيه ': 'شركة تبوك للتنمية الزراعية',
'الأسماك': 'الشركة السعودية للأسماك',
'الشرقية للتنمية ': 'الشركة الشرقية للتنمية',
'الجوف الزراعيه': 'شركة الجوف الزراعية',
'بيشة الزراعيه': 'شركة بيشة للتنمية الزراعية',
'جازان للتنمية': 'شركة جازان للتنمية',
'الاتصالات': 'شركة الاتصالات السعودية',
'اتحاد اتصالات': 'شركة إتحاد إتصالات',
'زين السعودية': 'شركة الاتصالات المتنقلة السعودية',
'عذيب للاتصالات': 'شركة إتحاد عذيب للاتصالات',
'المتكاملة': 'الشركة السعودية للإتصالات المتكاملة',
'التعاونية ': 'شركة التعاونية للتأمين',
'ملاذ للتأمين': 'ملاذ للتأمين',
'ميدغلف للتأمين': 'ميدغلف للتأمين',
'أليانز إس إف ': 'أليانز إس إف',
'سلامة': 'شركة سلامة للتأمين التعاوني',
'ولاء للتأمين': 'ولاء للتأمين',
'جزيرة تكافل':'شركة الجزيرة تكافل تعاوني',
'الدرع العربي ': 'شركة الدرع العربي للتأمين التعاوني',
'ساب تكافل': 'ساب للتكافل',
'سند': 'شركة سند للتأمين و إعادة التأمين التعاوني',
'سايكو': 'الشركة العربية السعودية للتأمين التعاوني',
'وفا للتأمين': 'وفا للتأمين',
'إتحاد الخليج': 'شركة إتحاد الخليج للتأمين التعاوني',
'الأهلي للتكافل': 'شركة الأهلي للتكافل',
'العربي للتأمين': 'شركة متلايف وايه أي جي والبنك العربي للتأمين التعاوني',
'الأهلية': 'الشركة الأهلية للتأمين التعاوني',
'أسيج': 'المجموعة المتحدة للتأمين التعاوني',
'التأمين العربية ': 'شركة التأمين العربية التعاونية',
'الاتحاد التجاري ': 'شركة الاتحاد التجاري للتأمين التعاوني',
'الصقر للتأمين ': 'شركة الصقر للتأمين التعاوني',
'المتحدة للتأمين ': 'المجموعة المتحدة للتأمين التعاوني',
'الإعادة السعودية ': 'الشركة السعودية لإعادة التأمين(إعادة) التعاونية',
'بوبا العربية ': 'بوبا العربية للتأمين التعاوني',
'وقاية للتكافل': 'شركة وقاية للتأمين و إعادة التأمين التكافلي',
'تكافل الراجحي ': 'شركة الراجحي للتأمين التعاوني',
'ايس': 'شركة أيس العربية للتأمين التعاوني',
'اكسا- التعاونية': 'شركة اكسا للتأمين التعاوني',
'الخليجية العامة': 'الشركة الخليجية العامة للتأمين التعاوني',
' بروج للتأمين': 'شركة بروج للتأمين التعاوني',
'العالمية': 'شركة العالمية للتأمين التعاوني',
'سوليدرتي تكافل': 'شركة سوليدرتي السعودية للتكافل',
'الوطنية': 'الشركة الوطنية للتأمين',
'أمانة للتأمين': 'شركة أمانة للتأمين التعاوني',
'عناية': 'شركة عناية السعودية للتأمين التعاوني',
'الإنماء طوكيو مارين': 'شركة الإنماء طوكيو مارين',
'المصافي': 'شركة المصافي العربية السعودية',
'المتطورة': 'الشركة السعودية للصناعات المتطورة',
'الاحساء للتنميه': 'شركة الاحساء للتنمية',
'سيسكو': 'سيسكو',
'عسير': 'شركة عسير للتجارة والسياحة والصناعة',
'الباحة': 'شركة الباحة للإستثمار والتنمية',
'المملكة': 'شركة المملكة القابضة',
'تكوين': 'شركة تكوين المتطورة للصناعات',
'بى سى آى': 'ى سى آى',
'معادن': 'شركة التعدين العربية السعودية',
'أسترا الصناعية': 'مجموعة أسترا الصناعية',
'مجموعة السريع': 'شركة مجموعة السريع التجارية الصناعية',
'شاكر': 'شركة الحسن غازي إبراهيم شاكر',
'الدوائية': 'الشركة السعودية للصناعات الدوائية والمستلزمات الطبية',
'زجاج': 'شركة الصناعات الزجاجية الوطنية',
'فيبكو': 'فيبكو',
'معدنية': 'معدنية',
'الكيميائيه السعوديه': 'الشركة الكيميائية السعودية',
'صناعة الورق': 'الشركة السعودية لصناعة الورق',
'العبداللطيف': 'شركة العبداللطيف للاستثمار الصناعي',
'الصادرات': 'الشركة السعودية للصادرات الصناعية',
'أسلاك': 'شركة إتحاد مصانع الأسلاك',
'مجموعة المعجل': 'شركة مجموعة محمد المعجل',
'الأنابيب السعودية': 'الشركة السعودية لأنابيب الصلب',
'الخضري': 'شركة أبناء عبدالله عبدالمحسن الخضري',
'الخزف': 'شركة الخزف السعودي',
'الجبس': 'شركة الجبس الأهلية',
'الكابلات': 'شركة الكابلات السعودية',
'صدق': 'صدق',
'اميانتيت': 'شركة اميانتيت العربية السعودية',
'أنابيب': 'أنابيب',
'الزامل للصناعة': 'شركة الزامل للاستثمار الصناعي',
'البابطين': 'شركة البابطين للطاقة و الاتصالات',
'الفخارية': 'الشركة السعودية لإنتاج الأنابيب الفخارية',
'مسك': 'مسك',
'البحر الأحمر': 'البحر الأحمر',
'العقارية': 'العقارية',
'طيبة للاستثمار ': 'طيبة للاستثمار',
'مكة للانشاء': 'مكة للانشاء',
'التعمير': 'التعمير',
'إعمار': 'إعمار',
'جبل عمر': 'جبل عمر',
'دار الأركان': 'دار الأركان',
'مدينة المعرفة ': 'مدينة المعرفة',
'البحري': 'البحري',
'النقل الجماعي': 'النقل الجماعي',
'مبرد': 'مبرد',
'بدجت السعودية': 'بدجت السعودية',
'تهامه للاعلان': 'تهامه للاعلان',
'الأبحاث و التسويق': 'الأبحاث و التسويق',
'طباعة وتغليف': 'طباعة وتغليف',
'الطيار': 'الطيار',
'دور': 'دور',
'شمس': 'شمس',
'مجموعة الحكير': 'مجموعة الحكير',
'بوان': 'بوان',
'ميبكو':'شركة الشرق الاوسط لصناعة وانتاج الورق',
'ساكو': 'الشركة السعودية للعدد والأدوات',
'الشركة السعودية للخدمات الأرضية':'الشركة السعودية للخدمات الأرضية',
}


combination = {
'تاسي': '(ﺕﺎﺴﻳ OR ﺕﺎﺳﻯ)',
'الرياض': '(ﺐﻨﻛ+ﺎﻟﺮﻳﺎﺿ OR ﻢﺻﺮﻓ+ﺎﻟﺮﻳﺎﺿ)',
'الجزيرة': '(ﺐﻨﻛ+ﺎﻠﺟﺰﻳﺮﻫ OR ﺐﻨﻛ+ﺎﻠﺟﺰﻳﺭﺓ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺰﻳﺭﺓ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺰﻳﺮﻫ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺰﻳﺮﻫ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺰﻳﺭ OR ﺐﻨﻛ+ﺎﻠﺟﺰﻳﺭ)',
'استثمار': '(ﺐﻨﻛ+ﺍﻼﺴﺘﺜﻣﺍﺭ OR ﻢﺻﺮﻓ+ﺍﻼﺴﺘﺜﻣﺍﺭ OR ﺐﻨﻛ+ﺍﻸﺴﺘﺜﻣﺍﺭ OR ﻢﺻﺮﻓ+ﺍﻸﺴﺘﺜﻣﺍﺭ)',
'السعودي الهولندي': '(ﺎﻠﺒﻨﻛ+ﺎﻠﻫﻮﻠﻧﺪﻳ OR ﺎﻠﺒﻨﻛ+ﺎﻠﻫﻮﻠﻧﺩﻯ OR ﻢﺻﺮﻓ+ﺎﻠﻫﻮﻠﻧﺪﻳ OR ﻢﺻﺮﻓ+ﺎﻠﻫﻮﻠﻧﺩﻯ OR ﺎﻠﺴﻋﻭﺪﻳ+ﺎﻠﻫﻮﻠﻧﺪﻳ OR ﺎﻠﺴﻋﻭﺩﻯ+ﺎﻠﻫﻮﻠﻧﺩﻯ OR ﺎﻠﺴﻋﻭﺩﻯ+ﺎﻠﻫﻮﻠﻧﺪﻳ OR ﺎﻠﺴﻋﻭﺪﻳ+ﺎﻠﻫﻮﻠﻧﺩﻯ)',
'السعودي الفرنسي': '(ﺎﻠﺒﻨﻛ+ﺎﻠﻓﺮﻨﺴﻳ OR ﺎﻠﺒﻨﻛ+ﺎﻠﻓﺮﻨﺳﻯ OR ﻢﺻﺮﻓ+ﺎﻠﻓﺮﻨﺴﻳ OR ﻢﺻﺮﻓ+ﺎﻠﻓﺮﻨﺳﻯ OR ﺎﻠﺴﻋﻭﺪﻳ+ﺎﻠﻓﺮﻨﺴﻳ OR ﺎﻠﺴﻋﻭﺩﻯ+ﺎﻠﻓﺮﻨﺳﻯ OR ﺎﻠﺴﻋﻭﺩﻯ+ﺎﻠﻓﺮﻨﺴﻳ OR ﺎﻠﺴﻋﻭﺪﻳ+ﺎﻠﻓﺮﻨﺳﻯ)',
'ساب': '(ﻢﺻﺮﻓ+ﺱﺎﺑ OR ﺐﻨﻛ+ﺱﺎﺑ OR ﺕﺎﺴﻳ+ﺱﺎﺑ)',
'العربي الوطني': '(ﺎﻠﺒﻨﻛ+ﺎﻟﻮﻄﻨﻳ+ﺎﻠﻋﺮﺒﻳ OR ﺎﻠﺒﻨﻛ+ﺎﻟﻮﻄﻧﻯ+ﺎﻠﻋﺮﺑﻯ OR ﺐﻨﻛ+ﺎﻠﻋﺮﺒﻳ+ﺎﻟﻮﻄﻨﻳ OR ﺐﻨﻛ+ﺎﻠﻋﺮﺑﻯ+ﺎﻟﻮﻄﻧﻯ OR ﻢﺻﺮﻓ+ﺎﻠﻋﺮﺒﻳ+ﺎﻟﻮﻄﻨﻳ OR ﻢﺻﺮﻓ+ﺎﻠﻋﺮﺑﻯ+ﺎﻟﻮﻄﻧﻯ)',
'سامبا': '(ﺱﺎﻤﺑﺍ)',
'الراجحي': '(ﺐﻨﻛ+ﺎﻠﺟﺍﺮﺤﻳ OR ﺐﻨﻛ+ﺎﻠﺟﺍﺮﺤﻳ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺍﺮﺤﻳ OR ﻢﺻﺮﻓ+ﺎﻠﺟﺍﺮﺤﻳ)',
'البلاد': '(ﺐﻨﻛ+ﺎﻠﺑﻻﺩ OR ﻢﺻﺮﻓ+ﺎﻠﺑﻻﺩ)',
'الإنماء': '(ﺐﻨﻛ+ﺍﻼﻨﻣﺍﺀ OR ﻢﺻﺮﻓ+ﺍﻼﻨﻣﺍﺀ OR ﺐﻨﻛ+ﺍﻺﻨﻣﺍﺀ OR ﻢﺻﺮﻓ+ﺍﻸﻨﻣﺍﺀ OR ﺐﻨﻛ+ﺍﻸﻨﻣﺍﺀ OR ﻢﺻﺮﻓ+ﺍﻺﻨﻣﺍﺀ OR ﺍﻼﻨﻣﺍﺀ+ﺕﺎﺴﻳ OR ﺍﻺﻨﻣﺍﺀ+ﺕﺎﺴﻳ)',
'كيمانول': '(ﻚﻴﻣﺎﻧﻮﻟ OR ﻚﻣﺎﻧﻮﻟ)',
'بتروكيم': '(ﺐﺗﺭﻮﻜﻴﻣ OR ﺐﻴﺗﺭﻮﻜﻴﻣ)',
'سابك': '(ﺱﺎﺒﻛ)',
'سافكو': '(ﺱﺎﻔﻛﻭ)',
'التصنيع': '(ﺎﻠﺘﺼﻨﻴﻋ OR ﺵﺮﻛﺓ+ﺖﺼﻨﻴﻋ OR ﺵﺮﻜﻫ+ﺖﺼﻨﻴﻋ)',
'اللجين': '(ﺎﻠﻠﺠﻴﻧ)',
'نماء للكيماويات': '(ﻦﻣﺍﺀ+ﻞﻠﻜﻴﻣﺍﻮﻳﺎﺗ OR ﻦﻣﺍﺀ+ﺎﻠﻜﻴﻣﺍﻮﻳﺎﺗ OR ﻦﻣﺍﺀ)',
'المجموعة السعودية': '(ﺎﻠﻤﺠﻣﻮﻋﺓ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺎﻠﻤﺠﻣﻮﻋﺓ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺎﻠﻤﺠﻣﻮﻌﻫ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺎﻠﻤﺠﻣﻮﻌﻫ+ﺎﻠﺴﻋﻭﺪﻴﻫ)',
'الصحراء للبتروكيماويات': '(ﺎﻠﺼﺣﺭﺍﺀ+ﻞﻠﺒﺗﺭﻮﻜﻴﻣﺍﻮﻳﺎﺗ OR ﺎﻠﺼﺣﺭﺍﺀ+ﺐﺗﺭﻮﻜﻴﻣﺍﻮﻳﺎﺗ OR ﺎﻠﺼﺣﺭﺍ+ﻞﻠﺒﺗﺭﻮﻜﻴﻣﺍﻮﻳﺎﺗ OR ﺎﻠﺼﺣﺭﺍ+ﺐﺗﺭﻮﻜﻴﻣﺍﻮﻳﺎﺗ OR ﺎﻠﺼﺣﺭﺍﺀ)',
'ينساب': '(ﻲﻨﺳﺎﺑ)',
'سبكيم العالمية': '(ﺲﺒﻜﻴﻣ)',
'المتقدمة': '(ﺎﻠﻤﺘﻗﺪﻣﺓ OR ﺎﻠﻤﺘﻗﺪﻤﻫ)',
'كيان': '(ﻚﻳﺎﻧ)',
'بترو رابغ': '(ﺐﺗﺭﻭ+ﺭﺎﺒﻏ OR ﺐﻴﺗﺭﻭ+ﺭﺎﺒﻏ OR ﺐﺗﺭﻭﺭﺎﺒﻏ OR ﺐﻴﺗﺭﻭﺭﺎﺒﻏ)',
'أسمنت حائل': '(ﺄﺴﻤﻨﺗ+ﺡﺎﺌﻟ OR ﺎﺴﻤﻨﺘﺣﺎﺌﻟ OR ﺲﻤﻨﺗ+ﺡﺎﺌﻟ OR ﺱ+ﺡﺎﺌﻟ)',
'أسمنت نجران': '(ﺄﺴﻤﻨﺗ+ﻦﺟﺭﺎﻧ OR ﺎﺴﻤﻨﺗ+ﻦﺟﺭﺎﻧ OR ﺲﻤﻨﺗ+ﻦﺟﺭﺎﻧ OR ﺱ+ﻦﺟﺭﺎﻧ)',
'اسمنت المدينة': '(ﺎﺴﻤﻨﺗ+ﺎﻠﻣﺪﻴﻨﻫ OR ﺎﺴﻤﻨﺗ+ﺎﻠﻣﺪﻴﻧﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻣﺪﻴﻨﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻣﺪﻴﻧﺓ OR ﺲﻤﻨﺗ+ﺎﻠﻣﺪﻴﻨﻫ OR ﺲﻤﻤﻨﺗ+ﺎﻠﻣﺪﻴﻧﺓ OR ﺱ+ﺎﻠﻣﺪﻴﻨﻫ OR ﺱ+ﺎﻠﻣﺪﻴﻧﺓ)',
'اسمنت الشمالية': '(ﺎﺴﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻳﺓ OR ﺎﺴﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻳﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﺸﻣﺎﻠﻳﺓ OR ﺱ+ﺎﻠﺸﻣﺎﻠﻴﻫ OR ﺱ+ﺎﻠﺸﻣﺎﻠﻳﺓ)',
'الاسمنت العربية': '(ﺍﻼﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺍﻸﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺎﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺍﻼﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺍﻸﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺎﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺱ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺱ+ﺎﻠﻋﺮﺒﻳﺓ)',
'اسمنت اليمامة': '(ﺎﺴﻤﻨﺗ+ﺎﻠﻴﻣﺎﻣﺓ OR ﺎﺴﻤﻨﺗ+ﺎﻠﻴﻣﺎﻤﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻴﻣﺎﻣﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻴﻣﺎﻤﻫ OR ﺲﻤﻨﺗ+ﺎﻠﻴﻣﺎﻤﻫ OR ﺲﻤﻨﺗ+ﺎﻠﻴﻣﺎﻣﺓ OR ﺲﻤﻨﺗ+ﺎﻠﻴﻣﺎﻤﻫ OR ﺱ+ﺎﻠﻴﻣﺎﻤﻫ OR ﺱ+ﺎﻠﻴﻣﺎﻣﺓ)',
'اسمنت السعوديه': '(ﺎﺴﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺎﺴﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺲﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺱ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺱ+ﺎﻠﺴﻋﻭﺪﻳﺓ)',
'اسمنت القصيم': '(ﺎﺴﻤﻨﺗ+ﺎﻠﻘﺼﻴﻣ OR ﺄﺴﻤﻨﺗ+ﺎﻠﻘﺼﻴﻣ OR ﺲﻤﻨﺗ+ﺎﻠﻘﺼﻴﻣ OR ﺎﺴﻤﻨﺗ+ﺎﻠﻘﺼﻴﻣ OR ﺱ+ﺎﻠﻘﺼﻴﻣ)',
'اسمنت الجنوبيه': '(ﺎﺴﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻴﻫ OR ﺎﺴﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻳﺓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻳﺓ OR ﺲﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﺠﻧﻮﺒﻳﺓ OR ﺱ+ﺎﻠﺠﻧﻮﺒﻳﺓ OR ﺱ+ﺎﻠﺠﻧﻮﺒﻴﻫ)',
'اسمنت ينبع': '(ﺎﺴﻤﻨﺗ+ﻲﻨﺒﻋ OR ﺄﺴﻤﻨﺗ+ﻲﻨﺒﻋ OR ﺲﻤﻨﺗ+ﻲﻨﺒﻋ OR ﺱ+ﻲﻨﺒﻋ)',
'اسمنت الشرقية': '(ﺎﺴﻤﻨﺗ+ﺎﻠﺷﺮﻘﻳﺓ OR ﺎﺴﻤﻨﺗ+ﺎﻠﺷﺮﻘﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺷﺮﻘﻴﻫ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺷﺮﻘﻳﺓ OR ﺲﻤﻨﺗ+ﺎﻠﺷﺮﻘﻴﻫ OR ﺲﻤﻨﺗ+ﺎﻠﺷﺮﻘﻳﺓ OR ﺱ+ﺎﻠﺷﺮﻘﻴﻫ OR ﺱ+ﺎﻠﺷﺮﻘﻴﻫ)',
'اسمنت تبوك': '(ﺄﺴﻤﻨﺗ+ﺖﺑﻮﻛ OR ﺎﺴﻤﻨﺗ+ﺖﺑﻮﻛ OR ﺲﻤﻨﺗ+ﺖﺑﻮﻛ OR ﺱ+ﺖﺑﻮﻛ)',
'اسمنت الجوف': '(ﺎﺴﻤﻨﺗ+ﺎﻠﺟﻮﻓ OR ﺄﺴﻤﻨﺗ+ﺎﻠﺟﻮﻓ OR ﺲﻤﻨﺗ+ﺎﻠﺟﻮﻓ OR ﺱ+ﺎﻠﺟﻮﻓ)',
'أسواق ع العثيم': '(ﺎﺳﻭﺎﻗ+ﺎﻠﻌﺜﻴﻣ OR ﺄﺳﻭﺎﻗ+ﺎﻠﻌﺜﻴﻣ OR ﺱﻮﻗ+ﺎﻠﻌﺜﻴﻣ OR ﺵﺮﻜﻫ+ﺎﻠﻌﺜﻴﻣ)',
'المواساة': '(ﺎﻠﻣﻭﺎﺳﺍﺓ OR ﺎﻠﻣﻭﺎﺳﺎﻫ OR ﻡﻭﺎﺳﺎﻫ OR ﻡﻭﺎﺳﺍﺓ)',
'إكسترا': '(ﺄﻜﺴﺗﺭﺍ OR ﺈﻜﺴﺗﺭﺍ OR ﺎﻜﺴﺗﺭﺍ)',
'دله الصحية': '(ﺪﻠﻫ+ﺎﻠﺼﺤﻴﻫ OR ﺪﻠﻫ+ﺎﻠﺼﺤﻳﺓ OR ﺪﻟﺓ+ﺎﻠﺼﺤﻴﻫ OR ﺪﻟﺓ+ﺎﻠﺼﺤﻳﺓ OR ﻢﺠﻣﻮﻌﻫ+ﺪﻠﻫ OR ﻢﺠﻣﻮﻌﻫ+ﺪﻟﺓ OR ﻢﺠﻣﻮﻋﺓ+ﺪﻠﻫ OR ﻢﺠﻣﻮﻋﺓ+ﺪﻟﺓ)',
'رعاية': '(ﺮﻋﺎﻴﻫ OR ﺮﻋﺎﻳﺓ)',
'ساسكو': '(ﺱﺎﺴﻛﻭ)',
'ثمار': '(ﺚﻣﺍﺭ)',
'مجموعة فتيحي': '(ﻒﺘﻴﺣﻯ OR ﻒﺘﻴﺤﻳ)',
'جرير': '(ﺝﺮﻳﺭ)',
'الدريس': '(ﺎﻟﺩﺮﻴﺳ)',
'الحكير': '(ﺎﻠﺤﻜﻳﺭ)',
'الخليج للتدريب': '(ﺎﻠﺨﻠﻴﺟ+ﻞﻠﺗﺩﺮﻴﺑ OR ﺎﻠﺨﻠﻴﺟ+ﺎﻠﺗﺩﺮﻴﺑ OR ﺎﻠﺨﻠﻴﺟ+ﺕﺩﺮﻴﺑ OR ﺦﻠﻴﺟ+ﻞﻠﺗﺩﺮﻴﺑ)',
'الغاز والتصنيع': '(ﺎﻠﻏﺍﺯ+ﺎﻠﺘﺼﻨﻴﻋ OR ﺎﻠﻏﺍﺯ)',
'كهرباء السعودية': '(ﻚﻫﺮﺑﺍﺀ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﻚﻫﺮﺑﺍﺀ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺲﻬﻣ+ﺎﻠﻜﻫﺮﺑﺍﺀ)',
'مجموعة صافولا': '(ﺹﺎﻓﻭﻻ)',
'الغذائية': '(ﺎﻠﻏﺫﺎﺌﻴﻫ OR ﺎﻠﻏﺫﺎﺌﻳﺓ OR ﻮﻓﺮﻫ OR ﻮﻓﺭﺓ)',
'سدافكو': '(ﺱﺩﺎﻔﻛﻭ)',
'المراعي': '(ﺎﻠﻣﺭﺎﻋﻯ OR ﺎﻠﻣﺭﺎﻌﻳ)',
'أنعام القابضة': '(ﺄﻨﻋﺎﻣ+ﺎﻠﻗﺎﺒﺿﺓ OR ﺎﻨﻋﺎﻣﺎﻠﻗﺎﺒﺿﺓ OR ﺄﻨﻋﺎﻣﺎﻠﻗﺎﺒﻀﻫ OR ﺎﻨﻋﺎﻣﺎﻠﻗﺎﺒﻀﻫ OR ﺎﻨﻋﺎﻣ+ﺕﺎﺴﻳ OR ﺄﻨﻋﺎﻣ+ﺕﺎﺴﻳ)',
'حلواني إخوان': '(ﺢﻟﻭﺎﻨﻳ+ﺈﺧﻭﺎﻧ OR ﺢﻟﻭﺎﻨﻳ+ﺎﺧﻭﺎﻧ OR ﺢﻟﻭﺎﻨﻳ+ﺄﺧﻭﺎﻧ OR ﺢﻟﻭﺎﻨﻳ+ﺈﺧﻭﺎﻧ OR ﺢﻟﻭﺎﻨﻳ+ﺎﺧﻭﺎﻧ OR ﺢﻟﻭﺎﻨﻳ+ﺄﺧﻭﺎﻧ OR ﺵﺮﻜﻫ+ﺢﻟﻭﺎﻧﻯ OR ﺵﺮﻛﺓ+ﺢﻟﻭﺎﻨﻳ OR ﺕﺎﺳﻯ+ﺢﻟﻭﺎﻧﻯ OR ﺕﺎﺴﻳ+ﺢﻟﻭﺎﻨﻳ)',
'هرفي للأغذية': '(ﻩﺮﻔﻳ OR ﻩﺮﻓﻯ)',
'التموين': '(ﺎﻠﺘﻣﻮﻴﻧ)',
'نادك': '(ﻥﺍﺪﻛ)',
'القصيم الزراعيه': '(ﺎﻠﻘﺼﻴﻣ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺎﻠﻘﺼﻴﻣ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﻖﺼﻴﻣ+ﺯ OR ﺎﻠﻘﺼﻴﻣ+ﺯ OR ﻖﺼﻴﻣ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﻖﺼﻴﻣ+ﺎﻟﺯﺭﺎﻌﻴﻫ)',
'تبوك الزراعيه': '(ﺖﺑﻮﻛ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺖﺑﻮﻛ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﺖﺑﻮﻛ+ﺯ)',
'الأسماك': '(ﺍﻸﺴﻣﺎﻛ OR ﺍﻼﺴﻣﺎﻛ)',
'الشرقية للتنمية': '(ﺎﻠﺷﺮﻘﻳﺓ+ﻞﻠﺘﻨﻤﻳﺓ OR ﺎﻠﺷﺮﻘﻳﺓ+ﻞﻠﺘﻨﻤﻴﻫ OR ﺎﻠﺷﺮﻘﻴﻫ+ﻞﻠﺘﻨﻤﻳﺓ OR ﺎﻠﺷﺮﻘﻴﻫ+ﻞﻠﺘﻨﻤﻴﻫ OR ﺲﻬﻣ+ﺎﻠﺷﺮﻘﻴﻫ OR ﺲﻬﻣ+ﺎﻠﺷﺮﻘﻳﺓ OR ﺎﻠﺷﺮﻘﻴﻫ+ﺯ OR ﺎﻠﺷﺮﻘﻳﺓ+ﺯ)',
'الجوف الزراعيه': '(ﺎﻠﺟﻮﻓ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺎﻠﺟﻮﻓ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﺎﻠﺟﻮﻓ+ﺯ)',
'بيشة الزراعيه': '(ﺐﻴﺸﻫ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺐﻴﺷﺓ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺐﻴﺷﺓ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﺐﻴﺸﻫ+ﺎﻟﺯﺭﺎﻌﻳﺓ OR ﺐﻴﺸﻫ+ﺎﻟﺯﺭﺎﻌﻴﻫ OR ﺐﻴﺸﻫ+ﺯ OR ﺐﻴﺷﺓ+ﺯ OR ﺲﻬﻣ+ﺐﻴﺸﻫ OR ﺲﻬﻣ+ﺐﻴﺷﺓ)',
'جازان للتنمية': '(ﺝﺍﺯﺎﻧ+ﻞﻠﺘﻨﻤﻳﺓ OR ﺝﺍﺯﺎﻧ+ﻞﻠﺘﻨﻤﻴﻫ)',
'الاتصالات': '(ﺍﻼﺘﺻﺍﻼﺗ OR ﺍﻸﺘﺻﺍﻼﺗ OR STC)',
'اتحاد اتصالات': '(ﺎﺘﺣﺍﺩ+ﺎﺘﺻﺍﻼﺗ OR ﺈﺘﺣﺍﺩ+ﺎﺘﺻﺍﻼﺗ OR ﺎﺘﺣﺍﺩ+ﺄﺘﺻﺍﻼﺗ OR ﺈﺘﺣﺍﺩ+ﺄﺘﺻﺍﻼﺗ OR ﺄﺘﺣﺍﺩ+ﺎﺘﺻﺍﻼﺗ OR ﺄﺘﺣﺍﺩ+ﺎﺘﺻﺍﻼﺗ OR سهم+موبايلي OR  سهم+موبايلى)',
'زين السعودية': '(ﺰﻴﻧ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺰﻴﻧ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺲﻬﻣ+ﺰﻴﻧ)',
'عذيب للاتصالات': '(ﻉﺬﻴﺑ)',
'المتكاملة': '(ﺎﻠﻤﺘﻛﺎﻤﻠﻫ OR ﺎﻠﻤﺘﻛﺎﻤﻟﺓ OR ﺎﻠﻤﺘﻛﺎﻤﻠﻫ)',
'التعاونية': '(ﺎﻠﺘﻋﺍﻮﻨﻴﻫ OR ﺎﻠﺘﻋﺍﻮﻨﻳﺓ OR ﺎﻠﺘﻋﺍﻮﻨﻴﻫ)',
'ملاذ للتأمين': '(ﻡﻻﺫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻡﻻﺫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻡﻻﺫ+ﺕﺎﺴﻳ OR ﺲﻬﻣ+ﻡﻻﺫ)',
'ميدغلف للتأمين': '(ﻢﻳﺪﻐﻠﻓ OR ﻢﻳﺪﻘﻠﻓ OR ﻢﻳﺩ+ﻎﻠﻓ OR ﻢﻳﺩ+ﻖﻠﻓ)',
'أليانز إس إف': '(ﺎﻠﻳﺎﻧﺯ+ﺎﺳ+ﺎﻓ OR ﺈﺳ+ﺈﻓ OR ﺎﻠﻳﺎﻧﺯ+ﺕﺎﺴﻳ OR ﺈﻠﻳﺎﻧﺯ+ﺕﺎﺴﻳ)',
'سلامة': '(ﺲﻬﻣ+ﺱﻼﻤﻫ OR ﺲﻬﻣ+ﺱﻼﻣﺓ OR ﺕﺎﺴﻳ+ﺱﻼﻤﻫ OR ﺕﺎﺴﻳ+ﺱﻼﻤﻫ OR ﺱﻼﻣﺓ+ ﻞﻠﺗﺄﻤﻴﻧ OR ﺱﻼﻤﻫ+ ﻞﻠﺗﺄﻤﻴﻧ)',
'ولاء للتأمين': '(ﻭﻻﺀ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻭﻻﺀ+ﻞﻠﺗﺎﻤﻴﻧ OR ﻭﻻﺀ+ﺕﺎﺴﻳ OR ﺲﻬﻣ+ﻭﻻﺀ)',
'الدرع العربي': '(ﺎﻟﺩﺮﻋ+ﺎﻠﻋﺮﺒﻳ OR ﺎﻟﺩﺮﻋ+ﺎﻠﻋﺮﺑﻯ OR ﺎﻟﺩﺮﻋ+ﺕﺎﺴﻳ OR ﺎﻟﺩﺮﻋ+ﺕﺎﻤﻴﻧ OR ﺎﻟﺩﺮﻋ+ﺲﻬﻣ)',
'ساب تكافل': '(ﺱﺎﺑ+ﺖﻛﺎﻔﻟ OR ﺱﺎﺑ+ﺕﺎﺴﻳ OR ﺱﺎﺑ+ﺲﻬﻣ)',
'سند': '(ﺲﻧﺩ+ﺲﻬﻣ OR ﺲﻧﺩ+ﺕﺎﻤﻴﻧ OR ﺲﻧﺩ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺲﻧﺩ+ﺕﺎﺴﻳ OR ﺲﻧﺩ+ﺕﺎﺳﻯ)',
'سايكو': '(ﺱﺎﻴﻛﻭ OR ﺱﺎﻴﻛﻭ+ﺕﺎﻤﻴﻧ OR ﺱﺎﻴﻛﻭ+ﻞﻠﺗﺎﻤﻴﻧ)',
'وفا للتأمين': '(ﻮﻓﺍ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻮﻓﺍ+ﻞﻠﺗﺎﻤﻴﻧ OR ﻮﻓﺍﺀ+ﻞﻠﺗﺎﻤﻴﻧ OR ﻮﻓﺍﺀ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻮﻓﺍﺀ+ﺲﻬﻣ OR ﻮﻓﺍﺀ+ﺕﺎﺴﻳ OR ﻮﻓﺍﺀ+ﺕﺎﺴﻳ)',
'إتحاد الخليج': '(ﺈﺘﺣﺍﺩ+ﺎﻠﺨﻠﻴﺟ OR ﺄﺘﺣﺍﺩ+ﺎﻠﺨﻠﻴﺟ OR ﺎﺘﺣﺍﺩ+ﺎﻠﺨﻠﻴﺟ)',
'الأهلي للتكافل': '(ﺍﻸﻬﻠﻳ+ﻞﻠﺘﻛﺎﻔﻟ OR ﺍﻼﻬﻠﻳ+ﻞﻠﺘﻛﺎﻔﻟ OR ﺍﻸﻬﻠﻳ+ﺖﻛﺎﻔﻟ OR ﺍﻼﻬﻠﻳ+ﺖﻛﺎﻔﻟ)',
'الأهلية': '(ﺍﻸﻬﻠﻳﺓ+ﺎﻠﺘﻋﺍﻮﻨﻳ OR ﺍﻸﻬﻠﻴﻫ+ﺎﻠﺘﻋﺍﻮﻨﻳ OR ﺍﻼﻬﻠﻴﻫ+ﺎﻠﺘﻋﺍﻮﻨﻳ OR ﺍﻼﻬﻠﻳﺓ+ﺎﻠﺘﻋﺍﻮﻨﻳ OR ﺍﻼﻬﻠﻳﺓ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺍﻼﻬﻠﻴﻫ+ﻞﻠﺗﺎﻤﻴﻧ)',
'أسيج': '(ﺄﺴﻴﺟ OR ﺎﺴﻴﺟ OR ﺈﺴﻴﺟ)',
'التأمين العربية': '(ﺎﻠﺗﺄﻤﻴﻧ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺎﻠﺗﺄﻤﻴﻧ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺎﻠﺗﺎﻤﻴﻧ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺎﻠﺗﺎﻤﻴﻧ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺕ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺕ+ﺎﻠﻋﺮﺒﻳﺓ)',
'الاتحاد التجاري': '(ﺍﻼﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺮﻳ OR ﺍﻼﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺭﻯ OR ﺍﻸﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺭﻯ OR ﺍﻸﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺮﻳ OR ﺍﻺﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺭﻯ OR ﺍﻺﺘﺣﺍﺩ+ﺎﻠﺘﺟﺍﺮﻳ OR ﺍﻼﺘﺣﺍﺩ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺕ+ﺍﻼﺘﺣﺍﺩ OR ﺕ+ﺍﻸﺘﺣﺍﺩ)',
'الصقر للتأمين': '(ﺎﻠﺼﻗﺭ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﺼﻗﺭ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺲﻬﻣ+ﺎﻠﺼﻗﺭ OR ﺎﻠﺼﻗﺭ+ﺕﺎﺴﻳ)',
'المتحدة للتأمين': '(ﺎﻠﻤﺘﺣﺩﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻤﺘﺣﺩﺓ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺎﻠﻤﺘﺣﺪﻫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻤﺘﺣﺪﻫ+ﻞﻠﺗﺎﻤﻴﻧ)',
'الإعادة السعودية': '(ﺍﻺﻋﺍﺩﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺍﻺﻋﺍﺪﻫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻋﺍﺪﻫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺍﻼﻋﺍﺩﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺍﻸﻋﺍﺩﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR سهم+إعاده OR سهم+إعادة OR سهم+اعاده OR سهم+اعادة)',
'بوبا العربية': '(ﺏﻮﺑﺍ)',
'وقاية للتكافل': '(ﻮﻗﺎﻳﺓ+ﻞﻠﺘﻛﺎﻔﻟ OR ﻮﻗﺎﻴﻫ+ﻞﻠﺘﻛﺎﻔﻟ OR ﻮﻗﺎﻴﻫ+ﺖﻛﺎﻔﻟ OR ﺲﻬﻣ+ﻮﻗﺎﻴﻫ OR ﺲﻬﻣ+ﻮﻗﺎﻳﺓ OR ﺕﺎﺴﻳ+ﻮﻗﺎﻴﻫ OR ﺕﺎﺴﻳ+ﻮﻗﺎﻴﻫ OR ﺕﺎﺴﻳ+ﻮﻗﺎﻳﺓ OR ﺕﺎﺴﻳ+ﻮﻗﺎﻳﺓ)',
'تكافل الراجحي': '(ﺖﻛﺎﻔﻟ+ﺎﻟﺭﺎﺠﺤﻳ OR ﺖﻛﺎﻔﻟ+ﺎﻟﺭﺎﺠﺣﻯ OR ﺕ+ﺎﻟﺭﺎﺠﺤﻳ OR ﺕ+ﺎﻟﺭﺎﺠﺣﻯ)',
'ايس': '(ﺎﻴﺳ OR ﺄﻴﺳ OR ﺄﻴﺳ+ﻞﻠﺗﺄﻤﻴﻧ  OR ﺎﻴﺳ+ﻞﻠﺗﺄﻤﻴﻧ )',
'اكسا- التعاونية': '(ﺎﻜﺳﺍ OR ﺈﻜﺳﺍ OR ﺄﻜﺳﺍ)',
'الخليجية العامة': '(ﺎﻠﺨﻠﻴﺠﻳﺓ+ﺎﻠﻋﺎﻣﺓ OR ﺎﻠﺨﻠﻴﺠﻴﻫ+ﺎﻠﻋﺎﻤﻫ OR ﺎﻠﺨﻠﻴﺠﻳﺓ+ﺎﻠﻋﺎﻤﻫ OR ﺎﻠﺨﻠﻴﺠﻴﻫ+ﺎﻠﻋﺎﻣﺓ OR ﺲﻬﻣ+ﺎﻠﺨﻠﻴﺠﻴﻫ OR ﺕﺎﺴﻳ+ﺎﻠﺨﻠﻴﺠﻴﻫ OR ﺕﺎﺴﻳ+ﺎﻠﺨﻠﻴﺠﻳﺓ OR ﺕﺎﺳﻯ+ﺎﻠﺨﻠﻴﺠﻴﻫ OR ﺕﺎﺳﻯ+ﺎﻠﺨﻠﻴﺠﻳﺓ)',
'بروج للتأمين': '(ﺏﺭﻮﺟ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺏﺭﻮﺟ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺏﺭﻮﺟ)',
'العالمية': '(ﺎﻠﻋﺎﻠﻤﻳﺓ OR ﺎﻠﻋﺎﻠﻤﻴﻫ OR ﺎﻠﻋﺎﻠﻤﻴﻫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻋﺎﻠﻤﻳﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻋﺎﻠﻤﻴﻫ+ﺎﻠﺘﻋﺍﻮﻨﻳ OR ﺎﻠﻋﺎﻠﻤﻳﺓ+ﺎﻠﺘﻋﺍﻮﻨﻳ)',
'سوليدرتي تكافل': '(ﺱﻮﻠﻳﺩﺮﺘﻳ OR ﺱﻮﻠﻳﺩﺮﺗﻯ OR ﺱﻮﻟﺩﺮﺘﻳ OR ﺱﻮﻟﺩﺮﺗﻯ)',
'الوطنية': '(ﺎﻟﻮﻄﻨﻳﺓ OR ﺎﻟﻮﻄﻨﻴﻫ OR ﺎﻟﻮﻄﻨﻳﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻟﻮﻄﻨﻴﻫ+ﻞﻠﺗﺄﻤﻴﻧ)',
'أمانة للتأمين': '(ﺄﻣﺎﻧﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻣﺎﻧﺓ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺄﻣﺎﻧﺓ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺎﻣﺎﻧﺓ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺕ+ﺄﻣﺎﻨﻫ OR ﺕ+ﺎﻣﺎﻧﺓ OR ﺕ+ﺎﻣﺎﻨﻫ OR ﺕ+ﺄﻣﺎﻧﺓ)',
'عناية': '(ﻊﻧﺎﻴﻫ OR ﻊﻧﺎﻳﺓ OR ﻊﻧﺎﻴﻫ+ﻞﻠﺗﺎﻤﻴﻧ OR ﻊﻧﺎﻳﺓ+ﻞﻠﺗﺎﻤﻴﻧ OR ﻊﻧﺎﻴﻫ+ﻞﻠﺗﺄﻤﻴﻧ OR ﻊﻧﺎﻳﺓ+ﻞﻠﺗﺄﻤﻴﻧ)',
'الإنماء طوكيو م': '(ﺍﻺﻨﻣﺍﺀ+ﻁﻮﻜﻳﻭ OR ﺍﻼﻨﻣﺍﺀ+ﻁﻮﻜﻳﻭ  OR ﻁﻮﻜﻳﻭ+سصهم OR  ﻁﻮﻜﻳﻭ+تاسي )',
'المصافي': '(ﺎﻠﻤﺻﺎﻔﻳ OR ﺎﻠﻤﺻﺎﻓﻯ)',
'المتطورة': '(ﺲﻬﻣ+ﺎﻠﻤﺘﻃﻭﺮﻫ OR ﺲﻬﻣ+ﺎﻠﻤﺘﻃﻭﺭﺓ OR ﺕﺎﺴﻳ+ﺎﻠﻤﺘﻃﻭﺮﻫ OR ﺕﺎﺳﻯ+ﺎﻠﻤﺘﻃﻭﺮﻫ OR ﺕﺎﺳﻯ+ﺎﻠﻤﺘﻃﻭﺭﺓ OR ﺕﺎﺴﻳ+ﺎﻠﻤﺘﻃﻭﺭﺓ)',
'الاحساء للتنميه': '(ﺍﻼﺤﺳﺍﺀ+ﻞﻠﺘﻨﻤﻴﻫ OR ﺍﻸﺤﺳﺍﺀ+ﻞﻠﺘﻨﻤﻴﻫ OR ﺍﻼﺤﺳﺍﺀ+ﻞﻠﺘﻨﻤﻳﺓ OR ﺍﻸﺤﺳﺍﺀ+ﻞﻠﺘﻨﻤﻳﺓ OR ﺲﻬﻣ+ﺍﻸﺤﺳﺍﺀ OR ﺲﻬﻣ+ﺍﻼﺤﺳﺍﺀ OR ﺕﺎﺴﻳ+ﺍﻸﺤﺳﺍﺀ OR ﺕﺎﺴﻳ+ﺍﻼﺤﺳﺍﺀ OR ﺕﺎﺳﻯ+ﺍﻼﺤﺳﺍﺀ OR ﺕﺎﺳﻯ+ﺍﻸﺤﺳﺍﺀ)',
'سيسكو': '(ﺲﻴﺴﻛﻭ)',
'عسير': '(ﺲﻬﻣ+ﻊﺴﻳﺭ OR ﺕﺎﺴﻳ+ﻊﺴﻳﺭ OR ﺕﺎﺳﻯ+ﻊﺴﻳﺭ)',
'الباحة': '(ﺲﻬﻣ+ﺎﻠﺑﺎﺤﻫ OR ﺲﻬﻣ+ﺎﻠﺑﺎﺣﺓ OR ﺕﺎﺴﻳ+ﺎﻠﺑﺎﺤﻫ OR ﺕﺎﺳﻯ+ﺎﻠﺑﺎﺤﻫ OR ﺕﺎﺳﻯ+ﺎﻠﺑﺎﺣﺓ OR ﺕﺎﺴﻳ+ﺎﻠﺑﺎﺣﺓ)',
'المملكة': '(ﺲﻬﻣ+ﺎﻠﻤﻤﻠﻜﻫ OR ﺲﻬﻣ+ﺎﻠﻤﻤﻠﻛﺓ OR ﺕﺎﺴﻳ+ﺎﻠﻤﻤﻠﻜﻫ OR ﺕﺎﺴﻳ+ﺎﻠﻤﻤﻠﻛﺓ OR ﺕﺎﺳﻯ+ﺎﻠﻤﻤﻠﻛﺓ OR ﺕﺎﺳﻯ+ﺎﻠﻤﻤﻠﻜﻫ)',
'تكوين': '(ﺖﻛﻮﻴﻧ)',
'بى سى آى': '(ﺏﻯ+ﺱﻯ+ﺁﻯ OR ﺏﻯ+ﺱﻯ+ﺍﻯ OR ﺐﻳ+ﺲﻳ+ﺂﻳ OR ﺐﻳ+ﺲﻳ+ﺎﻳ)',
'معادن': '(ﻢﻋﺍﺪﻧ)',
'أسترا الصناعية': '(ﺄﺴﺗﺭﺍ OR ﺎﺴﺗﺭﺍ)',
'مجموعة السريع': '(ﻢﺠﻣﻮﻋﺓ+ﺎﻠﺳﺮﻴﻋ OR ﻢﺠﻣﻮﻌﻫ+ﺎﻠﺳﺮﻴﻋ)',
'شاكر': '(ﺲﻬﻣ+ﺵﺎﻛﺭ OR ﺕﺎﺴﻳ+ﺵﺎﻛﺭ OR ﺕﺎﺳﻯ+ﺵﺎﻛﺭ)',
'الدوائية': '(ﺲﻬﻣ+ﺎﻟﺩﻭﺎﺌﻳﺓ OR ﺲﻬﻣ+ﺎﻟﺩﻭﺎﺌﻴﻫ)',
'زجاج': '(ﺰﺟﺎﺟ)',
'فيبكو': '(ﻒﻴﺒﻛﻭ OR ﻒﺒﻛﻭ)',
'معدنية': '(ﻢﻋﺪﻨﻳﺓ OR ﻢﻋﺪﻨﻴﻫ)',
'الكيميائيه السعوديه': '(ﺎﻠﻜﻴﻤﻳﺎﺌﻴﻫ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺎﻠﻜﻴﻤﻳﺎﺌﻳﺓ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺎﻠﻜﻴﻤﻳﺎﺌﻴﻫ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺎﻠﻜﻴﻤﻳﺎﺌﻳﺓ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺎﻠﻜﻴﻤﻳﺎﺌﻴﻫ OR ﺎﻠﻜﻴﻤﻳﺎﺌﻳﺓ)',
'صناعة الورق': '(ﺺﻧﺎﻋﺓ+ﺎﻟﻭﺮﻗ OR ﺺﻧﺎﻌﻫ+ﺎﻟﻭﺮﻗ OR ﺲﻬﻣ+ﺎﻟﻭﺮﻗ OR ﺕﺎﺴﻳ+ﺎﻟﻭﺮﻗ OR ﺕﺎﺳﻯ+ﺎﻟﻭﺮﻗ)',
'العبداللطيف': '(ﺎﻠﻌﺑﺩﺎﻠﻠﻄﻴﻓ OR ﺎﻠﻌﺑﺩ+ﺎﻠﻠﻄﻴﻓ OR ﻊﺑﺩﺎﻠﻠﻄﻴﻓ OR ﻊﺑﺩ+ﺎﻠﻠﻄﻴﻓ OR ﻉ+ﺎﻠﻠﻄﻴﻓ)',
'الصادرات': '(ﺲﻬﻣ+ﺎﻠﺻﺍﺩﺭﺎﺗ OR ﺕﺎﺴﻳ+ﺎﻠﺻﺍﺩﺭﺎﺗ OR ﺕﺎﺳﻯ+ﺎﻠﺻﺍﺩﺭﺎﺗ)',
'أسلاك': '(ﺲﻬﻣ+ﺄﺳﻼﻛ OR ﺲﻬﻣ+ﺎﺳﻼﻛ OR ﺕﺎﺴﻳ+ﺄﺳﻼﻛ OR ﺕﺎﺴﻳ+ﺎﺳﻼﻛ OR ﺕﺎﺳﻯ+ﺄﺳﻼﻛ OR ﺕﺎﺳﻯ+ﺎﺳﻼﻛ)',
'مجموعة المعجل': '(ﻢﺠﻣﻮﻋﺓ+ﺎﻠﻤﻌﺠﻟ OR ﻢﺠﻣﻮﻌﻫ+ﺎﻠﻤﻌﺠﻟ OR ﺲﻬﻣ+ﺎﻠﻤﻌﺠﻟ)',
'الأنابيب السعودية': '(ﺍﻸﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺍﻸﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻴﻫ OR ﺍﻼﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺍﻼﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺄﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻳﺓ OR ﺄﻧﺎﺒﻴﺑ+ﺎﻠﺴﻋﻭﺪﻴﻫ)',
'الخضري': '(ﺎﻠﺨﺿﺮﻳ OR ﺎﻠﺨﺿﺭﻯ)',
'الخزف': '(ﺎﻠﺧﺰﻓ)',
'الجبس': '(ﺎﻠﺠﺒﺳ)',
'الكابلات': '(ﺎﻠﻛﺎﺑﻼﺗ)',
'صدق': '(ﺹﺪﻗ)',
'اميانتيت': '(ﺎﻤﻳﺎﻨﺘﻴﺗ)',
'أنابيب': '(ﺲﻬﻣ+ﺄﻧﺎﺒﻴﺑ OR ﺲﻬﻣ+ﺎﻧﺎﺒﻴﺑ OR ﺎﻧﺎﺒﻴﺑ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺄﻧﺎﺒﻴﺑ+ﺎﻠﻋﺮﺒﻳﺓ OR ﺎﻧﺎﺒﻴﺑ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺄﻧﺎﺒﻴﺑ+ﺎﻠﻋﺮﺒﻴﻫ OR ﺕﺎﺴﻳ+ﺄﻧﺎﺒﻴﺑ OR ﺕﺎﺳﻯ+ﺄﻧﺎﺒﻴﺑ OR ﺕﺎﺴﻳ+ﺎﻧﺎﺒﻴﺑ OR ﺕﺎﺳﻯ+ﺎﻧﺎﺒﻴﺑ)',
'الزامل للصناعة': '(ﺎﻟﺯﺎﻤﻟ+ﻞﻠﺼﻧﺎﻋﺓ OR ﺎﻟﺯﺎﻤﻟ+ﻞﻠﺼﻧﺎﻌﻫ OR ﺎﻟﺯﺎﻤﻟ)',
'البابطين': '(ﺎﻠﺑﺎﺒﻄﻴﻧ OR ﺏﺎﺒﻄﻴﻧ)',
'الفخارية': '(ﺎﻠﻔﺧﺍﺮﻳﺓ OR ﺎﻠﻔﺧﺍﺮﻴﻫ)',
'مسك': '(ﻢﺴﻛ)',
'البحر الأحمر': '(ﺎﻠﺒﺣﺭ+ﺍﻸﺤﻣﺭ OR ﺎﻠﺒﺣﺭ+ﺍﻼﺤﻣﺭ)',
'العقارية': '(ﺎﻠﻌﻗﺍﺮﻴﻫ OR ﺎﻠﻌﻗﺍﺮﻳﺓ)',
'طيبة للاستثمار': '(ﻂﻴﺑﺓ+ﻝﻼﺴﺘﺜﻣﺍﺭ OR ﻂﻴﺒﻫ+ﻝﻼﺴﺘﺜﻣﺍﺭ OR ﻂﻴﺑﺓ+ﻝﻸﺴﺘﺜﻣﺍﺭ OR ﻂﻴﺒﻫ+ﻝﻸﺴﺘﺜﻣﺍﺭ OR ﻂﻴﺑﺓ+ﻝﻺﺴﺘﺜﻣﺍﺭ OR ﻂﻴﺒﻫ+ﻝﻺﺴﺘﺜﻣﺍﺭ OR ﺲﻬﻣ+ﻂﻴﺒﻫ OR ﺲﻬﻣ+ﻂﻴﺑﺓ OR ﺕﺎﺴﻳ+ﻂﻴﺒﻫ OR ﺕﺎﺳﻯ+ﻂﻴﺒﻫ)',
'مكة للانشاء': '(ﻢﻛﺓ+ﻝﻼﻨﺷﺍﺀ OR ﻢﻜﻫ+ﻝﻼﻨﺷﺍﺀ OR ﻢﻛﺓ+ﻝﻸﻨﺷﺍﺀ OR ﻢﻜﻫ+ﻝﻸﻨﺷﺍﺀ OR ﻢﻛﺓ+ﻝﻺﻨﺷﺍﺀ OR ﻢﻜﻫ+ﻝﻺﻨﺷﺍﺀ OR ﺲﻬﻣ+ﻢﻜﻫ OR ﺕﺎﺴﻳ+ﻢﻜﻫ OR ﺕﺎﺳﻯ+ﻢﻜﻫ)',
'التعمير': '(ﺲﻬﻣ+ﺎﻠﺘﻌﻤﻳﺭ OR ﺕﺎﺴﻳ+ﺎﻠﺘﻌﻤﻳﺭ OR ﺕﺎﺳﻯ+ﺎﻠﺘﻌﻤﻳﺭ)',
'إعمار': '(ﺲﻬﻣ+ﺈﻌﻣﺍﺭ OR ﺲﻬﻣ+ﺄﻌﻣﺍﺭ OR ﺲﻬﻣ+ﺎﻌﻣﺍﺭ OR ﺕﺎﺴﻳ+ﺈﻌﻣﺍﺭ OR ﺕﺎﺴﻳ+ﺄﻌﻣﺍﺭ OR ﺕﺎﺴﻳ+ﺎﻌﻣﺍﺭ OR ﺕﺎﺳﻯ+ﺈﻌﻣﺍﺭ OR ﺕﺎﺳﻯ+ﺄﻌﻣﺍﺭ OR ﺕﺎﺳﻯ+ﺎﻌﻣﺍﺭ)',
'جبل عمر': '(ﺞﺒﻟ+ﻊﻣﺭ)',
'دار الأركان': '(ﺩﺍﺭ+ﺍﻻﺮﻛﺎﻧ OR ﺩﺍﺭ+ﺍﻹﺮﻛﺎﻧ)',
'مدينة المعرفة': '(ﻡﺪﻴﻧﺓ+ﺎﻠﻤﻋﺮﻓﺓ OR ﻡﺪﻴﻨﻫ+ﺎﻠﻤﻋﺮﻔﻫ OR ﻡﺪﻴﻧﺓ+ﺎﻠﻤﻋﺮﻔﻫ OR ﻡﺪﻴﻨﻫ+ﺎﻠﻤﻋﺮﻓﺓ OR ﺲﻬﻣ+ﺎﻠﻤﻋﺮﻔﻫ OR ﺲﻬﻣ+ﺎﻠﻤﻋﺮﻓﺓ OR ﺕﺎﺴﻳ+ﺎﻠﻤﻋﺮﻔﻫ OR ﺕﺎﺳﻯ+ﺎﻠﻤﻋﺮﻔﻫ OR ﺕﺎﺴﻳ+ﺎﻠﻤﻋﺮﻓﺓ OR ﺕﺎﺳﻯ+ﺎﻠﻤﻋﺮﻓﺓ)',
'البحري': '(ﺲﻬﻣ+ﺎﻠﺒﺣﺮﻳ OR ﺲﻬﻣ+ﺎﻠﺒﺣﺭﻯ OR ﺕﺎﺴﻳ+ﺎﻠﺒﺣﺮﻳ OR ﺕﺎﺳﻯ+ﺎﻠﺒﺣﺮﻳ OR ﺕﺎﺴﻳ+ﺎﻠﺒﺣﺭﻯ OR ﺕﺎﺳﻯ+ﺎﻠﺒﺣﺭﻯ)',
'النقل الجماعي': '(ﺎﻠﻨﻘﻟ+ﺎﻠﺠﻣﺎﻋﻯ OR ﺎﻠﻨﻘﻟ+ﺎﻠﺠﻣﺎﻌﻳ OR ﺲﻬﻣ+ﺎﻠﺠﻣﺎﻌﻳ OR ﺲﻬﻣ+ﺎﻠﺠﻣﺎﻋﻯ OR ﺕﺎﺴﻳ+ﺎﻠﺠﻣﺎﻌﻳ OR ﺕﺎﺳﻯ+ﺎﻠﺠﻣﺎﻌﻳ OR ﺕﺎﺳﻯ+ﺎﻠﺠﻣﺎﻋﻯ OR ﺕﺎﺳﻯ+ﺎﻠﺠﻣﺎﻋﻯ)',
'مبرد': '(ﻢﺑﺭﺩ)',
'بدجت السعودية': '(ﺏﺪﺠﺗ)',
'تهامه للاعلان': '(ﺖﻫﺎﻤﻫ+ﻝﻼﻋﻼﻧ OR ﺖﻫﺎﻣﺓ+ﻝﻼﻋﻼﻧ OR ﺖﻫﺎﻤﻫ+ﻝﻸﻋﻼﻧ OR ﺖﻫﺎﻣﺓ+ﻝﻸﻋﻼﻧ OR ﺲﻬﻣ+ﺖﻫﺎﻤﻫ OR ﺲﻬﻣ+ﺖﻫﺎﻣﺓ OR ﺕﺎﺴﻳ+ﺖﻫﺎﻣﺓ OR ﺕﺎﺳﻯ+ﺖﻫﺎﻤﻫ OR ﺕﺎﺴﻳ+ﺖﻫﺎﻤﻫ OR ﺕﺎﺳﻯ+ﺖﻫﺎﻣﺓ)',
'الأبحاث و التسويق': '(ﺍﻸﺒﺣﺎﺛ+ﺎﻠﺘﺳﻮﻴﻗ OR ﺍﻼﺒﺣﺎﺛ+ﺎﻠﺘﺳﻮﻴﻗ OR ﺎﺒﺣﺎﺛ+ﺖﺳﻮﻴﻗ OR ﺄﺒﺣﺎﺛ+ﺖﺳﻮﻴﻗ OR ﺲﻬﻣ+ﺍﻼﺒﺣﺎﺛ OR ﺲﻬﻣ+ﺍﻸﺒﺣﺎﺛ OR ﺕﺎﺴﻳ+ﺍﻸﺒﺣﺎﺛ OR ﺕﺎﺴﻳ+ﺍﻼﺒﺣﺎﺛ OR ﺕﺎﺳﻯ+ﺍﻸﺒﺣﺎﺛ OR ﺕﺎﺳﻯ+ﺍﻼﺒﺣﺎﺛ)',
#'ﻂﺑﺎﻋﺓ ﻮﺘﻐﻠﻴﻓ': '(ﻂﺑﺎﻌﻫ+ﺖﻐﻠﻴﻓ OR ﻂﺑﺎﻋﺓ+ﺖﻐﻠﻴﻓ OR ﻂﺑﺎﻌﻫ+ﺲﻬﻣ OR ﻂﺑﺎﻋﺓ+ﺲﻬﻣ OR ﺕﺎﺳﻯ+ﻂﺑﺎﻌﻫ OR ﺕﺎﺴﻳ+ﻂﺑﺎﻋﺓ OR ﺕﺎﺳﻯ+ﻂﺑﺎﻋﺓ)',
'طباعة وتغليف': '( ﻂﺑﺎﻌﻫ+ﺖﻐﻠﻴﻓ OR ﻂﺑﺎﻋﺓ+ﺖﻐﻠﻴﻓ OR ﻂﺑﺎﻌﻫ+ﺲﻬﻣ OR ﻂﺑﺎﻋﺓ+ﺲﻬﻣ OR ﺕﺎﺴﻳ+ﻂﺑﺎﻌﻫ OR ﺕﺎﺴﻳ+ﻂﺑﺎﻋﺓ OR ﺕﺎﺳﻯ+ﻂﺑﺎﻌﻫ OR ﺕﺎﺳﻯ+ﻂﺑﺎﻋﺓ )',
'الطيار': '(ﺲﻬﻣ+ﺎﻠﻄﻳﺍﺭ OR ﺕﺎﺴﻳ+ﺎﻠﻄﻳﺍﺭ OR ﺕﺎﺳﻯ+ﺎﻠﻄﻳﺍﺭ)',
'الحكير': '(الحكير)',
'دور': '(ﺩﻭﺭ+ﻞﻠﻀﻳﺎﻓﺓ OR ﺩﻭﺭ+ﻞﻠﻀﻳﺎﻔﻫ OR ﺩﻭﺭ+ﺲﻬﻣ OR ﺕﺎﺴﻳ+ﺩﻭﺭ OR ﺕﺎﺳﻯ+ﺩﻭﺭ OR ﺲﻬﻣ+ﺎﻠﻔﻧﺍﺪﻗ OR ﺕﺎﺴﻳ+ﺎﻠﻔﻧﺍﺪﻗ OR ﺕﺎﺳﻯ+ﺎﻠﻔﻧﺍﺪﻗ)',
'شمس': '(ﺲﻬﻣ+ﺶﻤﺳ OR ﺕﺎﺳﻯ+ﺶﻤﺳ OR ﺕﺎﺳﻯ+ﺶﻤﺳ)',
'البنك الأهلي': '(ﺎﻠﺒﻨﻛ+ﺍﻼﻬﻠﻳ OR ﺐﻨﻛ+ﺍﻼﻬﻠﻳ OR ﺲﻬﻣ+ﺍﻼﻬﻠﻳ OR ﺎﻠﺒﻨﻛ+ﺍﻼﻬﻟﻯ OR ﺐﻨﻛ+ﺍﻼﻬﻟﻯ OR ﺲﻬﻣ+ﺍﻼﻬﻟﻯ OR ﺎﻠﺒﻨﻛ+ﺍﻸﻬﻠﻳ OR ﺎﻠﺒﻨﻛ+ﺍﻸﻬﻟﻯ OR ﺐﻨﻛ+ﺍﻸﻬﻟﻯ OR ﺕﺎﺳﻯ+ﺍﻼﻬﻟﻯ)',
'الصناعات الكهربائيه': '( ﺎﻠﺼﻧﺎﻋﺎﺗ+ﺎﻠﻜﻫﺮﺑﺎﺌﻳﺓ OR  ﺎﻠﺼﻧﺎﻋﺎﺗ+ﺎﻠﻜﻫﺮﺑﺎﺌﻴﻫ)',
'بوان': 'بوان',
'اسمنت ام القرى': '( ﺎﺴﻤﻨﺗ+ﺎﻣ+ﺎﻠﻗﺭﻯ OR ﺎﺴﻤﻨﺗ+ﺎﻣ+ﺎﻠﻗﺮﻳ OR ﺎﺴﻤﻨﺗ+ﺄﻣ+ﺎﻠﻗﺮﻳ OR ﺎﺴﻤﻨﺗ+ﺄﻣ+ﺎﻠﻗﺭﻯ OR ﺄﺴﻤﻨﺗ+ﺎﻣ+ﺎﻠﻗﺭﻯ OR ﺄﺴﻤﻨﺗ+ﺎﻣ+ﺎﻠﻗﺮﻳ OR ﺄﺴﻤﻨﺗ+ﺄﻣ+ﺎﻠﻗﺮﻳ OR ﺄﺴﻤﻨﺗ+ﺄﻣ+ﺎﻠﻗﺭﻯ )',
'أسواق المزرعة': '( ﺄﺳﻭﺎﻗ+ﺎﻠﻣﺯﺮﻌﻫ OR ﺄﺳﻭﺎﻗ+ﺎﻠﻣﺯﺮﻋﺓ OR ﺎﺳﻭﺎﻗ+ﺎﻠﻣﺯﺮﻌﻫ OR ﺎﺳﻭﺎﻗ+ﺎﻠﻣﺯﺮﻋﺓ  )',
'الحمادي': '( ﺎﻠﺤﻣﺍﺪﻳ OR ﺎﻠﺤﻣﺍﺩﻯ  OR ﺢﻣﺍﺪﻳ OR ﺢﻣﺍﺩﻯ)',
'جزيرة تكافل': '( ﺝﺰﻳﺮﻫ+ﺖﻛﺎﻘﻟ OR ﺝﺰﻳﺭﺓ+ﺖﻛﺎﻔﻟ )',
'العربي للتأمين': '(  ﺎﻠﻋﺮﺒﻳ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻋﺮﺑﻯ+ﻞﻠﺗﺄﻤﻴﻧ OR ﺎﻠﻋﺮﺒﻳ+ﻞﻠﺗﺎﻤﻴﻧ OR ﺎﻠﻋﺮﺑﻯ+ﻞﻠﺗﺎﻤﻴﻧ)',
'مجموعة الحكير': '( ﺎﻠﺤﻜﻳﺭ )',
'ميبكو': '( الشرق+الاوسط OR الشرق+الورق OR تاسي+الشرق OR الاوسط+تاسي )',
'ساكو': '( ساكو OR SACO OR عدد+أدوات OR عدد+ادوات )',
'الشركة السعودية للخدمات الأرضية': 'الشركة السعودية للخدمات الأرضية',
};


stock_prices_names_mapping_tbl = {'تاسي':'تاسي',
'الرياض':'الرياض',
'الجزيرة':'الجزيرة',
'استثمار':'استثمار',
'السعودي الهولندي':'السعودي الهولندي',
'السعودي الفرنسي':'السعودي الفرنسي',
'ساب':'سـاب',
'العربي الوطني': 'العربي',
'سامبا':'سامبا',
'الراجحي':'الراجحي',
'البلاد':'البلاد',
'الإنماء':'الإنماء',
'كيمانول':'كيمانول',
'بتروكيم':'بتروكيم',
'سابك':'سابك',
'سافكو':'سافكو',
'التصنيع':'التصنيع',
'اللجين':'اللجين',
'نماء للكيماويات':'نماء للكيماويات',
'المجموعة السعودية':'المجموعة السعودية',
'الصحراء للبتروكيماويات': 'الصحراء',
'ينساب':'ينساب',
'سبكيم العالمية':'سبكيم العالمية',
'المتقدمة':'المتقدمة',
'كيان': 'كيان السعودية',
'بترو رابغ':'بترو رابغ',
'أسمنت حائل': 'اسمنت حائل',
'أسمنت نجران': 'اسمنت نجران',
'اسمنت المدينة':'اسمنت المدينة',
'اسمنت الشمالية':'اسمنت الشمالية',
'الاسمنت العربية':'الاسمنت العربية',
'اسمنت اليمامة':'اسمنت اليمامة',
'اسمنت السعوديه':'اسمنت السعوديه',
'اسمنت القصيم':'اسمنت القصيم',
'اسمنت الجنوبيه':'اسمنت الجنوبيه',
'اسمنت ينبع':'اسمنت ينبع',
'اسمنت الشرقية':'اسمنت الشرقية',
'اسمنت تبوك':'اسمنت تبوك',
'اسمنت الجوف':'اسمنت الجوف',
'أسواق ع العثيم':'أسواق ع العثيم',
'المواساة':'المواساة',
'إكسترا':'إكسترا',
'دله الصحية':'دله الصحية',
'رعاية':'رعاية',
'ساسكو':'ساسكو',
'ثمار':'ثمار',
'مجموعة فتيحي':'مجموعة فتيحي',
'جرير':'جرير',
'الدريس':'الدريس',
'الحكير':'الحكير',
'الخليج للتدريب':'الخليج للتدريب',
'الغاز والتصنيع':'الغاز',
'كهرباء السعودية':'كهرباء السعودية',
'مجموعة صافولا': 'صافولا',
'الغذائية':'الغذائية',
'سدافكو':'سدافكو',
'المراعي':'المراعي',
'أنعام القابضة':'أنعام القابضة',
'حلواني إخوان':'حلواني إخوان',
'هرفي للأغذية':'هرفي للأغذية',
'التموين':'التموين',
'نادك':'نادك',
'القصيم الزراعيه':'القصيم الزراعيه',
'تبوك الزراعيه':'تبوك الزراعيه',
'الأسماك':'الأسماك',
'الشرقية للتنمية':'الشرقية للتنمية',
'الجوف الزراعيه': 'الجوف',
'بيشة الزراعيه':'بيشة',
'جازان للتنمية':'جازان للتنمية',
'الاتصالات':'الاتصالات',
'اتحاد اتصالات': 'اتحاد اتصالات',
'زين السعودية':'زين السعودية',
'عذيب للاتصالات':'عذيب للاتصالات',
'المتكاملة':'المتكاملة',
'التعاونية':'التعاونية',
'ملاذ للتأمين':'ملاذ للتأمين',
'ميدغلف للتأمين':'ميدغلف للتأمين',
'أليانز إس إف':'أليانز إس إف',
'سلامة':'سلامة',
'ولاء للتأمين':'ولاء للتأمين',
'الدرع العربي':'الدرع العربي',
'ساب تكافل':'ساب تكافل',
'سند':'سند',
'سايكو':'سايكو',
'وفا للتأمين':'وفا للتأمين',
'إتحاد الخليج':'إتحاد الخليج',
'الأهلي للتكافل':'الأهلي للتكافل',
'الأهلية':'الأهلية',
'أسيج':'أسيج',
'التأمين العربية':'التأمين العربية',
'الاتحاد التجاري':'الاتحاد التجاري',
'الصقر للتأمين':'الصقر للتأمين',
'المتحدة للتأمين':'المتحدة للتأمين',
'الإعادة السعودية':'الإعادة السعودية',
'بوبا العربية':'بوبا العربية',
'وقاية للتكافل':'وقاية للتكافل',
'تكافل الراجحي':'تكافل الراجحي',
'ايس':'ايس',
'اكسا- التعاونية':'اكسا- التعاونية',
'الخليجية العامة':'الخليجية العامة',
'بروج للتأمين':'بروج للتأمين',
'العالمية':'العالمية',
'سوليدرتي تكافل':'سوليدرتي تكافل',
'الوطنية':'الوطنية',
'أمانة للتأمين':'أمانة للتأمين',
'عناية':'عناية',
'الإنماء طوكيو م':'الإنماء طوكيو م',
'المصافي':'المصافي',
'المتطورة':'المتطورة',
'الاحساء للتنميه':'الاحساء للتنميه',
'سيسكو':'سيسكو',
'عسير':'عسير',
'الباحة':'الباحة',
'المملكة':'المملكة',
'تكوين':'تكوين',
'بى سى آى':'بى سى آى',
'معادن':'معادن',
'أسترا الصناعية':'أسترا الصناعية',
'مجموعة السريع':'مجموعة السريع',
'شاكر':'شاكر',
'الدوائية':'الدوائية',
'زجاج':'زجاج',
'فيبكو':'فيبكو',
'معدنية':'معدنية',
'الكيميائيه السعوديه':'الكيميائيه السعوديه',
'صناعة الورق':'صناعة الورق',
'العبداللطيف':'العبداللطيف',
'الصادرات':'الصادرات',
'أسلاك':'أسلاك',
'مجموعة المعجل':'مجموعة المعجل',
'الأنابيب السعودية':'انابيب السعودية',
'الخضري':'الخضري',
'الخزف':'الخزف السعودي',
'الجبس':'الجبس',
'الكابلات':'الكابلات',
'صدق':'صدق',
'اميانتيت':'اميانتيت',
'أنابيب':'أنابيب',
'الزامل للصناعة':'الزامل للصناعة',
'البابطين':'البابطين',
'الفخارية':'الفخارية',
'مسك':'مسك',
'البحر الأحمر':'البحر الأحمر',
'العقارية':'العقارية',
'طيبة للاستثمار':'طيبة',
'مكة للانشاء':'مكة',
'التعمير':'التعمير',
'إعمار':'إعمار',
'جبل عمر':'جبل عمر',
'دار الأركان':'دار الأركان',
'مدينة المعرفة':'مدينة المعرفة',
'البحري':'البحري',
'النقل الجماعي':'النقل الجماعي',
'مبرد':'مبرد',
'بدجت السعودية':'بدجت السعودية',
'تهامه للاعلان':'تهامه للاعلان',
'الأبحاث و التسويق':'الأبحاث و التسويق',
'طباعة وتغليف':'طباعة وتغليف',
'الطيار':'الطيار',
'الفنادق':'الفنادق',
'شمس':'شمس',
'بوان':'بوان',
'ميبكو':'ميبكو',
'ساكو':'ساكو',
'الشركة السعودية للخدمات الأرضية':'الشركة السعودية للخدمات الأرضية',
}


price_mapping={
'الرياض' : 'الرياض',
'الجزيرة' : 'الجزيرة',
'استثمار': 'استثمار',
'سعودي هولندي': 'السعودي الهولندي',
'السعودي الفرنسي': 'السعودي الفرنسي',
'ساب': 'ساب',
'العربي': 'العربي الوطني',
'سامبا': 'سامبا',
'الراجحي': 'الراجحي',
'البلاد' : 'البلاد',
'الإنماء': 'الإنماء',
'كيمانول': 'كيمانول',
'بتروكيم': 'بتروكيم',
'سابك': 'سابك',
'سافكو': 'سافكو',
'التصنيع': 'التصنيع',
'اللجين': 'اللجين',
'نماء للكيماويات': 'نماء للكيماويات',
'مجموعة السعودية': 'المجموعة السعودية',
'البتروكيماويات': 'الصحراء للبتروكيماويات',
'ينساب': 'ينساب',
'سبكيم العالمية': 'سبكيم العالمية',
'المتقدمة': 'المتقدمة',
'كيان السعودية': 'كيان',
'بترو رابغ': 'بترو رابغ',
'اسمنت حائل': 'أسمنت حائل',
'اسمنت نجران': 'أسمنت نجران',
'اسمنت المدينة': 'اسمنت المدينة',
'اسمنت الشمالية': 'اسمنت الشمالية',
'ﺎﺴﻤﻨﺗ ﺎﻣ ﺎﻠﻗﺭﻯ':'ﺎﺴﻤﻨﺗ ﺎﻣ ﺎﻠﻗﺭﻯ',
'اسمنت العربية': 'الاسمنت العربية',
'اسمنت اليمامة': 'اسمنت اليمامة',
'اسمنت ام القرى': 'اسمنت ام القرى',
'الأسمنت السعودي': 'اسمنت السعوديه',
'اسمنت القصيم': 'اسمنت القصيم',
'اسمنت الجنوب': 'اسمنت الجنوبيه',
'س ينبع': 'اسمنت ينبع',
'اسمنت الشرقية': 'اسمنت الشرقية',
'س تبوك': 'اسمنت تبوك',
'اسمنت الجوف': 'اسمنت الجوف',
'أسواق ع العثيم': 'أسواق ع العثيم',
'ﺎﻠﺤﻣﺍﺪﻳ':'ﺎﻠﺤﻣﺍﺪﻳ',
'المواساة': 'المواساة',
'إكسترا': 'إكسترا',
'دله الصحية': 'دله الصحية',
'رعاية': 'رعاية',
'أسواق المزرعة':'أسواق المزرعة',
'ساسكو': 'ساسكو',
'ثمار': 'ثمار',
'مجموعة فتيحي': 'مجموعة فتيحي',
'جرير': 'جرير',
'الدريس': 'الدريس',
'الحكير': 'الحكير',
'الحمادي':'الحمادي',
'الخليج للتدريب': 'الخليج للتدريب',
'الغاز': 'الغاز والتصنيع',
'كهرباء السعودية': 'كهرباء السعودية',
'صافولا': 'مجموعة صافولا',
'وفرة': 'الغذائية',
'سدافكو': 'سدافكو',
'المراعي': 'المراعي',
'أنعام القابضة': 'أنعام القابضة',
'حلواني إخوان': 'حلواني إخوان',
'هرفي للأغذية': 'هرفي للأغذية',
'التموين': 'التموين',
'نادك': 'نادك',
'جاكو': 'القصيم الزراعيه',
'تبوك الزراعية': 'تبوك الزراعيه',
'الأسماك': 'الأسماك',
'الشرقية للتنمية': 'الشرقية للتنمية',
'الجوف': 'الجوف الزراعيه',
'بيشة': 'بيشة الزراعيه',
'جازادكو': 'جازان للتنمية',
'الاتصالات': 'الاتصالات',
'إتحاد إتصالات': 'اتحاد اتصالات',
'زين السعودية': 'زين السعودية',
'عذيب للاتصالات': 'عذيب للاتصالات',
'المتكاملة': 'المتكاملة',
'التعاونية': 'التعاونية',
'ملاذ للتأمين': 'ملاذ للتأمين',
'العربي للتأمين':'العربي للتأمين',
'ميدغلف للتأمين': 'ميدغلف للتأمين',
'أليانز إس إف': 'أليانز إس إف',
'سلامة': 'سلامة',
'ولاء': 'ولاء للتأمين',
'جزيرة تكافل':'جزيرة تكافل',
'الدرع العربي': 'الدرع العربي',
'ساب تكافل': 'ساب تكافل',
'سند': 'سند',
'سايكو': 'سايكو',
'وفا للتأمين': 'وفا للتأمين',
'إتحاد الخليج': 'إتحاد الخليج',
'الأهلي للتكافل': 'الأهلي للتكافل',
'ﺎﻠﻋﺮﺒﻳ ﻞﻠﺗﺄﻤﻴﻧ':'ﺎﻠﻋﺮﺒﻳ ﻞﻠﺗﺄﻤﻴﻧ',
'الأهلية': 'الأهلية',
'أسيج': 'أسيج',
'التأمين العربية': 'التأمين العربية',
'الاتحاد التجاري': 'الاتحاد التجاري',
'الصقر للتأمين': 'الصقر للتأمين',
'المتحدة للتأمين': 'المتحدة للتأمين',
'الإعادة السعودية': 'الإعادة السعودية',
'بوبا العربية': 'بوبا العربية',
'وقاية للتكافل': 'وقاية للتكافل',
'تكافل الراجحي': 'تكافل الراجحي',
'ايس': 'ايس',
'اكسا- التعاونية': 'اكسا- التعاونية',
'الخليجية العامة': 'الخليجية العامة',
'بروج للتأمين': 'بروج للتأمين',
'العالمية': 'العالمية',
'سوليدرتي تكافل': 'سوليدرتي تكافل',
'الوطنية': 'الوطنية',
'أمانة للتأمين': 'أمانة للتأمين',
'عناية': 'عناية',
'الإنماء طوكيو م': 'الإنماء طوكيو م',
'المصافي': 'المصافي',
'متطورة': 'المتطورة',
'الاحساء': 'الاحساء للتنميه',
'سيسكو': 'سيسكو',
'عسير': 'عسير',
'الباحة': 'الباحة',
'المملكة': 'المملكة',
'تكوين': 'تكوين',
'بى سى آى': 'بى سى آى',
'معادن': 'معادن',
'أسترا الصناعية': 'أسترا الصناعية',
'مجموعة السريع': 'مجموعة السريع',
'شاكر': 'شاكر',
'الدوائية': 'الدوائية',
'زجاج': 'زجاج',
'فيبكو': 'فيبكو',
'معدنية': 'معدنية',
'الكيميائية': 'الكيميائيه السعوديه',
'صناعة الورق': 'صناعة الورق',
'العبداللطيف': 'العبداللطيف',
'صادرات': 'الصادرات',
'أسلاك': 'أسلاك',
'مجموعة المعجل': 'مجموعة المعجل',
'انابيب السعودية': 'الأنابيب السعودية',
'الخضري': 'الخضري',
'الخزف السعودي': 'الخزف',
'جبسكو': 'الجبس',
'الكابلات': 'الكابلات',
'صدق': 'صدق',
'اميانتيت': 'اميانتيت',
'أنابيب': 'أنابيب',
'الزامل للصناعة': 'الزامل للصناعة',
'البابطين': 'البابطين',
'الفخارية': 'الفخارية',
'مسك': 'مسك',
'البحر الأحمر': 'البحر الأحمر',
'العقارية': 'العقارية',
'طيبة': 'طيبة للاستثمار',
'مكة': 'مكة للانشاء',
'التعمير': 'التعمير',
'إعمار': 'إعمار',
'جبل عمر': 'جبل عمر',
'دار الأركان': 'دار الأركان',
'مدينة المعرفة': 'مدينة المعرفة',
'البحري': 'البحري',
'الجماعي': 'النقل الجماعي',
'مبرد': 'مبرد',
'بدجت السعودية': 'بدجت السعودية',
'تهامه': 'تهامه للاعلان',
'الأبحاث و التسويق': 'الأبحاث و التسويق',
'طباعة وتغليف': 'طباعة وتغليف',
'الطيار': 'الطيار',
'دور': 'دور',
'شمس': 'شمس',
'الاهلي' : 'البنك الأهلي',
'صناعات كهربائية': 'الصناعلات الكهرائيه',
'بوان': 'بوان',
'مجموعة الحكير': 'مجموعة الحكير',
'الشرق الاوسط لصناعه': 'none',
'ساكو':'ساكو',
'HSBC Saudi 20': 'none',
'Falcom 30': 'none',
'Falcom petrochemical': 'none',
'الشركة السعودية للخدمات الأرضية':'الشركة السعودية للخدمات الأرضية',
}

stocks_sectors = {'الاهلي':'المصارف والخدمات المالية', 
'ساب':'المصارف والخدمات المالية', 
'السعودي الفرنسي':'المصارف والخدمات المالية', 
'السعودي هولندي':'المصارف والخدمات المالية', 
'استثمار':'المصارف والخدمات المالية', 
'العربي':'المصارف والخدمات المالية', 
'البلاد':'المصارف والخدمات المالية', 
'الجزيرة':'المصارف والخدمات المالية', 
'الرياض':'المصارف والخدمات المالية', 
'سامبا':'المصارف والخدمات المالية', 
'الإنماء':'المصارف والخدمات المالية', 
'الراجحي':'المصارف والخدمات المالية', 
'سبكيم العالمية':'الصناعات البتروكيماوية', 
'سابك':'الصناعات البتروكيماوية', 
'المتقدمة':'الصناعات البتروكيماوية', 
'بتروكيم':'الصناعات البتروكيماوية', 
'مجموعة السعودية':'الصناعات البتروكيماوية', 
'سافكو':'الصناعات البتروكيماوية', 
'التصنيع':'الصناعات البتروكيماوية', 
'البتروكيماويات':'الصناعات البتروكيماوية', 
'اللجين':'الصناعات البتروكيماوية', 
'بترو رابغ':'الصناعات البتروكيماوية', 
'كيان السعودية':'الصناعات البتروكيماوية', 
'كيمانول':'الصناعات البتروكيماوية', 
'نماء للكيماويات':'الصناعات البتروكيماوية', 
'ينساب':'الصناعات البتروكيماوية', 
'اسمنت الشمالية':'الأسمنت', 
'اسمنت حائل':'الأسمنت', 
'اسمنت نجران':'الأسمنت', 
'اسمنت الجوف':'الأسمنت', 
'اسمنت القصيم':'الأسمنت', 
'اسمنت المدينة':'الأسمنت', 
'اسمنت الجنوب':'الأسمنت', 
'اسمنت الشرقية':'الأسمنت', 
'اسمنت اليمامة':'الأسمنت', 
'اسمنت ام القرى':'الأسمنت', 
'س تبوك':'الأسمنت', 
'س ينبع':'الأسمنت', 
'الأسمنت السعودي':'الأسمنت', 
'اسمنت العربية':'الأسمنت', 
'أسواق المزرعة':'التجزئة', 
'ساسكو':'التجزئة', 
'إكسترا':'التجزئة', 
'ثمار':'التجزئة', 
'رعاية':'التجزئة', 
'أسواق ع العثيم':'التجزئة', 
'الحمادي':'التجزئة', 
'الخليج للتدريب':'التجزئة', 
'الدريس':'التجزئة', 
'المواساة':'التجزئة', 
'جرير':'التجزئة', 
'دله الصحية':'التجزئة', 
'الحكير':'التجزئة', 
'مجموعة فتيحي':'التجزئة', 
'كهرباء السعودية':'الطاقة والمرافق الخدمية', 
'الغاز':'الطاقة والمرافق الخدمية', 
'الأسماك':'الزراعة والصناعات الغذائية', 
'سدافكو':'الزراعة والصناعات الغذائية', 
'الشرقية للتنمية':'الزراعة والصناعات الغذائية', 
'نادك':'الزراعة والصناعات الغذائية', 
'حلواني إخوان':'الزراعة والصناعات الغذائية', 
'الجوف':'الزراعة والصناعات الغذائية', 
'التموين':'الزراعة والصناعات الغذائية', 
'جاكو':'الزراعة والصناعات الغذائية', 
'المراعي':'الزراعة والصناعات الغذائية', 
'بيشة':'الزراعة والصناعات الغذائية', 
'تبوك الزراعية':'الزراعة والصناعات الغذائية', 
'جازادكو':'الزراعة والصناعات الغذائية', 
'أنعام القابضة':'الزراعة والصناعات الغذائية', 
'هرفي للأغذية':'الزراعة والصناعات الغذائية', 
'وفرة':'الزراعة والصناعات الغذائية', 
'صافولا':'الزراعة والصناعات الغذائية', 
'إتحاد إتصالات':'الاتصالات و تقنية المعلومات', 
'عذيب للاتصالات':'الاتصالات و تقنية المعلومات', 
'الاتصالات':'الاتصالات و تقنية المعلومات', 
'زين السعودية':'الاتصالات و تقنية المعلومات', 
'تكافل الراجحي':'التأمين', 
'العربي للتأمين':'التأمين', 
'الأهلية':'التأمين', 
'الخليجية العامة':'التأمين', 
'ولاء':'التأمين', 
'وفا للتأمين':'التأمين', 
'الإعادة السعودية':'التأمين', 
'سايكو':'التأمين', 
'المتحدة للتأمين':'التأمين', 
'الوطنية':'التأمين', 
'أسيج':'التأمين', 
'بوبا العربية':'التأمين', 
'ساب تكافل':'التأمين', 
'أليانز إس إف':'التأمين', 
'أمانة للتأمين':'التأمين', 
'ايس':'التأمين', 
'إتحاد الخليج':'التأمين', 
'اكسا- التعاونية':'التأمين', 
'الأهلي للتكافل':'التأمين', 
'الإنماء طوكيو م':'التأمين', 
'الاتحاد التجاري':'التأمين', 
'التأمين العربية':'التأمين', 
'التعاونية':'التأمين', 
'جزيرة تكافل':'التأمين', 
'الدرع العربي':'التأمين', 
'الصقر للتأمين':'التأمين', 
'العالمية':'التأمين', 
'ميدغلف للتأمين':'التأمين', 
'بروج للتأمين':'التأمين', 
'سلامة':'التأمين', 
'سند':'التأمين', 
'سوليدرتي تكافل':'التأمين', 
'عناية':'التأمين', 
'ملاذ للتأمين':'التأمين', 
'وقاية للتكافل':'التأمين', 
'سيسكو':'الاستثمار المتعدد', 
'متطورة':'الاستثمار المتعدد', 
'الاحساء':'الاستثمار المتعدد', 
'الباحة':'الاستثمار المتعدد', 
'المصافي':'الاستثمار المتعدد', 
'المملكة':'الاستثمار المتعدد', 
'عسير':'الاستثمار المتعدد', 
'صناعة الورق':'الاستثمار الصناعي', 
'صادرات':'الاستثمار الصناعي', 
'الدوائية':'الاستثمار الصناعي', 
'الكيميائية':'الاستثمار الصناعي', 
'معدنية':'الاستثمار الصناعي', 
'معادن':'الاستثمار الصناعي', 
'شاكر':'الاستثمار الصناعي', 
'زجاج':'الاستثمار الصناعي', 
'ساكو':'الاستثمار الصناعي', 
'بى سى آى':'الاستثمار الصناعي', 
'العبداللطيف':'الاستثمار الصناعي', 
'فيبكو':'الاستثمار الصناعي', 
'تكوين':'الاستثمار الصناعي', 
'مجموعة السريع':'الاستثمار الصناعي', 
'أسترا الصناعية':'الاستثمار الصناعي', 
'انابيب السعودية':'التشييد والبناء', 
'الفخارية':'التشييد والبناء', 
'صدق':'التشييد والبناء', 
'أنابيب':'التشييد والبناء', 
'الخضري':'التشييد والبناء', 
'أسلاك':'التشييد والبناء', 
'البابطين':'التشييد والبناء', 
'البحر الأحمر':'التشييد والبناء', 
'جبسكو':'التشييد والبناء', 
'الخزف السعودي':'التشييد والبناء', 
'الزامل للصناعة':'التشييد والبناء', 
'مسك':'التشييد والبناء', 
'صناعات كهربائية':'التشييد والبناء', 
'الكابلات':'التشييد والبناء', 
'اميانتيت':'التشييد والبناء', 
'بوان':'التشييد والبناء', 
'مجموعة المعجل':'التشييد والبناء', 
'إعمار':'التطوير العقاري', 
'العقارية':'التطوير العقاري', 
'التعمير':'التطوير العقاري', 
'جبل عمر':'التطوير العقاري', 
'دار الأركان':'التطوير العقاري', 
'طيبة':'التطوير العقاري', 
'مدينة المعرفة':'التطوير العقاري', 
'مكة':'التطوير العقاري', 
'الجماعي':'النقل', 
'مبرد':'النقل', 
'بدجت السعودية':'النقل', 
'البحري':'النقل', 
'طباعة وتغليف':'الإعلام والنشر', 
'الأبحاث و التسويق':'الإعلام والنشر', 
'تهامه':'الإعلام والنشر', 
'شمس':'الفنادق والسياحة', 
'دور':'الفنادق والسياحة', 
'مجموعة الحكير':'الفنادق والسياحة', 
'الطيار':'الفنادق والسياحة', 
'HSBC Saudi 20':'صناديق المؤشرات المتداولة', 
'Falcom 30':'صناديق المؤشرات المتداولة', 
'Falcom petrochemical':'صناديق المؤشرات المتداولة', 
'الشركة السعودية للخدمات الأرضية':'الشركة السعودية للخدمات الأرضية',
}



class NewsItem:
    title = ""
    link = ""
    pubDate = ""
    
def isNumber(value):
    try:
        float(value)
        return True
    except ValueError:
        return False 
    
    
@ajax
def get_stocks_weights(request):
    content_return = []
    for stock in stock_prices_names_mapping_tbl:
        try:
            weight = StockCounter.objects.extra(where={"`stock` = '"+stock+"' "}).values()[0]['counter']
        except:
            weight = 0
        try:
            sector = stocks_sectors[stock]
        except:
            sector = 'not_found'
            #sector = 'التأمين'
            print('Stock ' + str(stock.encode("utf-8")) + ' sector not found')
            #print('Stock ' + stock + ' sector not found')
            #print('Stock sector not found')
        sector = 'not_found'
        content_return.append({'text':stock, 'weight':weight,'html':{'class':sector}})

    return content_return

    
def get_stock_price(stock):
    try:
        urlstr = 'http://www.marketstoday.net/markets/%D8%A7%D9%84%D8%B3%D8%B9%D9%88%D8%AF%D9%8A%D8%A9/Companies/1/ar/'
        fileHandle = urllib.request.urlopen(urlstr)
        html = fileHandle.read()
        soup = BeautifulSoup(html)
        price = 0
        for b in soup.findAll('tr', attrs={'class':'symbolflip'})[1:]:
            if ""+price_mapping[stock]+"" == ""+b.find('a', attrs={'class':'jTip'}).text+"":
                return ""+b.findAll('td')[1].text+""
                break
    except Exception as e:
        #print('URL error ' + str(e) )
        return 0
        
def index(request):
    """Renders the home page."""
    if 'message' in request.session:
        message = request.session['message']
        del request.session['message']
    if 'error' in request.session:
        message = request.session['error']
        del request.session['error']

    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/index.html',
        context_instance = RequestContext(request,
        {
            'title':'Home Page',
            'message': message if 'message' in locals() else "",
            'error': message if 'error' in locals() else "",
        })
    )

def index_proto(request):
    """Renders the home page."""
    if 'message' in request.session:
        message = request.session['message']
        del request.session['message']
    if 'error' in request.session:
        message = request.session['error']
        del request.session['error']

    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/index_proto.html',
        context_instance = RequestContext(request,
        {
            'title':'Home Page',
            'message': message if 'message' in locals() else "",
            'error': message if 'error' in locals() else "",
        })
    )


#@login_required
def home(request):
    '''
    from twython import Twython
    global twitter
    twitter = Twython("MGMeNEK5bEqADjJRDJmQ8Yy1f", "eVR1kjrTdHPEiFuLoAEA6pPGSnuZ1NnAa1EwtqBi4wVA1tbRHo", "91079548-uhlRrwtgVQcavlf3lv4Dy1ZFCq5CXvBQFvc5A1l0n", "V6vLsqzqrdfs2YX4I1NVG2gP845gjTrBSDNxHVz496g66")
    '''
    
    # Start the TwitterCrawler      
    PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
    configFileCrawler = os.path.join(PROJECT_DIR, 'TwitterCrawler','Configurations', 'Configurations.xml')
    global twitterCrawler
    twitterCrawler = TwitterCrawler(configFileCrawler, None, None, None)
    #results = twitterCrawler.SearchQueryAPI(query, -1, -1)

    return render(
        request,
        'app/home.html',
        context_instance = RequestContext(request,
        {
            'title':'Home',
            #'tweets': tweets,
        })
    )

#@login_required
def home_proto(request):
    '''
    from twython import Twython
    global twitter
    twitter = Twython("MGMeNEK5bEqADjJRDJmQ8Yy1f", "eVR1kjrTdHPEiFuLoAEA6pPGSnuZ1NnAa1EwtqBi4wVA1tbRHo", "91079548-uhlRrwtgVQcavlf3lv4Dy1ZFCq5CXvBQFvc5A1l0n", "V6vLsqzqrdfs2YX4I1NVG2gP845gjTrBSDNxHVz496g66")
    '''
    
    # Start the TwitterCrawler      
    PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
    configFileCrawler = os.path.join(PROJECT_DIR, 'TwitterCrawler','Configurations', 'Configurations.xml')
    global twitterCrawler
    twitterCrawler = TwitterCrawler(configFileCrawler, None, None, None)
    #results = twitterCrawler.SearchQueryAPI(query, -1, -1)

    return render(
        request,
        'app/home_proto.html',
        context_instance = RequestContext(request,
        {
            'title':'Home',
            #'tweets': tweets,
        })
    )


@ajax
def get_prices_line(request):
    stock_name = request.POST['query']
    content_return = {}
    PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
    f_in = open(os.path.join(PROJECT_DIR, 'app', 'year_prices'), 'r', encoding='utf-8')
    lines = f_in.readlines()
    flag=0
    content_return = [];
    for line in reversed(lines):
        #print(line)
        l=line.split(',')
        if(l[0]=='<ticker>'):
            continue;
        if(l[0]=='SIBC'):
            flag=1
            content_return.append([l[1][:4]+'-'+l[1][5:6]+'-'+l[1][6:],float(l[5])]);
        elif(flag==1):
            break

    return content_return[0:100];

@ajax
def get_prices_candle(request):
    stock_name = request.POST['query']
    content_return = {}
    PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
    f_in = open(os.path.join(PROJECT_DIR, 'app', 'year_prices'), 'r', encoding='utf-8')
    lines = f_in.readlines()
    flag=0
    content_return = [];
    for line in reversed(lines):
        #print(line)
        l=line.split(',')
        if(l[0]=='<ticker>'):
            continue;
        if(l[0]=='SIBC'):
            flag=1
            content_return.append([l[1][:4]+'-'+l[1][5:6]+'-'+l[1][6:],float(l[4]),float(l[2]),float(l[5]),float(l[3]),'<b>'+l[1][6:]+'-'+l[1][5:6]+'-'+l[1][:4]+'</b>   O:'+l[2]+' H:'+l[3]+' L:'+l[4]+' C:'+l[5]]);
        elif(flag==1):
            break
    #print(content_return);
    return content_return[0:100];

@ajax
def get_stock_volume(request):
    stock_name = request.POST['query']
    content_return = []
    now_time = timezone.now()
    start_point = timezone.datetime(now_time.year, now_time.month, now_time.day, 8, 0, 0,)
    graph_point = start_point
    end_point = timezone.datetime(now_time.year, now_time.month, now_time.day, 17, 0, 0,)
    one_hour = timezone.timedelta(hours=1)
    while(graph_point <= end_point):
        prev_graph_point = graph_point
        graph_point += one_hour
        all_tweets = Opinion.objects.filter(stock=stock_name).values()
        w = count_number_tweets_in_range(all_tweets, prev_graph_point, graph_point)
        content_return.append([{'v':[prev_graph_point.hour,0,0],'f':str(prev_graph_point.hour)}, w]);

    return content_return;

def count_number_tweets_in_range(all_tweets, prev_graph_point, graph_point):
    for tweet in all_tweets:
        tweet_time_stamp = datetime.datetime.strptime(tweet['pub_date'], '%Y-%m-%d %H:%M:%S.%f+00:00')
        w = 0
        if((tweet_time_stamp >= prev_graph_point) and (tweet_time_stamp <= graph_point)):
            w += 1
    return w
#@login_required
@ajax
def get_tweets(request):
    stock_name = request.POST['query']
    content_return = {}
    #query = stock_name
    #query = synonyms[query]

    #remove the adult content
    #naughty_words=" AND ( -ﺰﺑ -ﻂﻳﺯ -ﻂﻴﻇ -ﺲﻜﺳ -ﺲﻜﺴﻳ -ﺲﺣﺎﻗ -ﺞﻨﺳ -ﻦﻴﻛ -ﺞﻨﺳ -ﺏﺯ -ﺏﺯﺍﺯ -ﻚﺳ -ﻒﺤﻟ -ﻒﺣﻮﻠﻫ -ﺬﺑ )"

    query = combination[stock_name] + " AND (سهم OR اسهم OR أسهم OR تداول OR ارتفع OR ارتفاع OR انخفض OR انخفاض OR هدف OR دعم OR ارتداد OR نسبة OR % OR %)" 
    
    '''
    #tweets = twitter.search(q= query + 'OR ' + synonyms[query], result_type='recent')
    try:
        tweets = twitter.search(q=query, result_type='recent')
    except:
        from twython import Twython
        twitter = Twython("MGMeNEK5bEqADjJRDJmQ8Yy1f", "eVR1kjrTdHPEiFuLoAEA6pPGSnuZ1NnAa1EwtqBi4wVA1tbRHo", "91079548-uhlRrwtgVQcavlf3lv4Dy1ZFCq5CXvBQFvc5A1l0n", "V6vLsqzqrdfs2YX4I1NVG2gP845gjTrBSDNxHVz496g66")
        tweets = twitter.search(q=query, result_type='recent')
    '''
    
    try:
        tweets = twitterCrawler.SearchQueryAPI(query, -1, -1)
    except:        
        PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
        configFileCrawler = os.path.join(PROJECT_DIR, 'TwitterCrawler','Configurations', 'Configurations.xml')
        twitterCrawler = TwitterCrawler(configFileCrawler, None, None, None)
        tweets = twitterCrawler.SearchQueryAPI(query, -1, -1)

    price = 0  
    #price = get_stock_price(stock_name)
    try:
        #import sys
        #import codecs
        #sys.stdout = codecs.getwriter("iso-8859-1")(sys.stdout, 'xmlcharrefreplace')
        price = StocksPrices.objects.filter(stock_name=""+str(stock_name.encode("utf-8"))+"").order_by('-id')[0].stock_price
        print('Price in DB')
    except:
        price = get_stock_price(stock_name)
        print('Getting price')
    from django.utils import timezone 
    content_return['price'] = price
    #tweets['price'] = CorrectionData.objects.get(stock_name=query)
    print('Saving tweets')
    for tweet in tweets:
        tweet_exist = Opinion.objects.filter(twitter_id=tweet['id_str']);
        if(len(tweet_exist) == 0):
            try:
                item = Opinion()
                item.twitter_id = tweet['id_str']
                item.user_id = tweet['user']['id']
                item.text = tweet['text']
                item.created_at = tweet['created_at']
                item.user_followers_count = tweet['user']['followers_count']
                item.user_profile_image_url = tweet['user']['profile_image_url']
                item.media_url = tweet['entities']
                item.tweeter_sname = tweet['user']['screen_name']
                item.tweeter_name = tweet['user']['name']
                item.pub_date = str(timezone.now())
                item.stock = stock_name
                item.labeled = False
                item.source = "twitter.com"
                if ' ﺰﺑ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻴﻇ ' in tweet['text'] and ' ﺲﻜﺳ ' in tweet['text'] and ' ﺲﻜﺴﻳ ' in tweet['text'] and ' ﺲﺣﺎﻗ ' in tweet['text'] and ' ﺞﻨﺳ ' in tweet['text'] and ' ﺏﺯ ' in tweet['text'] and ' ﺏﺯﺍﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻚﺳ ' in tweet['text'] and ' ﻒﺤﻟ ' in tweet['text'] and ' ﻒﺣﻮﻠﻫ ' in tweet['text'] and ' ﺬﺑ ' in tweet['text']:
                    print(tweet['text'])
                else:
                    item.save()
                item.relevancy = 'none'
                item.sentiment = 'none'
                item.labeled_user = 'none'
            except Exception as e: 
              pass
    print('Tweets saved')
    tweetes_to_render_temp = Opinion.objects.filter(stock=stock_name, labeled = False).values() 
    tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True)[0:150];
    #tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True);
    #my_list = list(tweetes_to_render)
    #print(json.dumps(my_list[0]))
    #tweetes_to_render_temp = Opview.objects.filter(stock=stock_name, labeled = False).values();
    #tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True);

    #prevent Duplicate 
    tweets_dict = {}
    tweets_dict[''] = ''
    i = 1
    x = 0
    print('Handling duplicates')
    while x < 50:
        tweet_render=tweetes_to_render[x];
        tweet_render_text=tweet_render.get('text').strip()
        tweet_render_text=re.sub(r"RT @\w*\w: ", '', tweet_render_text, flags=re.MULTILINE)
        tweet_render_text=re.sub(r"...", '', tweet_render_text, flags=re.MULTILINE)
        try:
            urls=re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', tweet_render_text);
            for i in range(0,len(urls)):
                rep='r\''+urls[i]+'\''
                tweet_render_text=re.sub(r""+urls[i]+"", '', tweet_render_text, flags=re.MULTILINE)
        except:
            pass
    
        if tweet_render_text in tweets_dict.keys():
            tweet = Opinion.objects.filter(twitter_id=tweet_render.get('twitter_id'))[0]
            tweet.similarId = tweets_dict[tweet_render_text]
            tweet.save()
            tweetes_to_render.pop(x); 
            if (len(tweetes_to_render_temp) > 50+i):
                tweetes_to_render.append(tweetes_to_render_temp[49+i])
                i=i+1
        elif(tweet_render.get('labeled_user') == request.user.username or tweet_render.get('labeled_user_second') == request.user.username):
            tweetes_to_render.remove(tweet_render)
            tweet = Opinion.objects.filter(twitter_id=tweet_render.get('twitter_id'))[0]
            tweet.similarId = tweets_dict[tweet_render_text]
            tweet.save()
            tweetes_to_render.pop(x); 
            if (len(tweetes_to_render_temp) > 50+i):
                tweetes_to_render.append(tweetes_to_render_temp[49+i])
                i=i+1
        elif(tweet_render.get('labeled_user') == request.user.username or tweet_render.get('labeled_user_second') == request.user.username):
            tweetes_to_render.remove(tweet_render)
            if (len(tweetes_to_render_temp) > 50+i):
                tweetes_to_render.append(tweetes_to_render_temp[49+i])
                i=i+1
        else:
            x=x+1
            tweets_dict[tweet_render_text] = tweet_render.get('twitter_id')

    content_return['statuses'] = tweetes_to_render[0:50]
    
    print('Start stats')
    # Fill in total number of entries in DB for this stock
    # Full DB
    content_return['total_entries_in_DB'] = StockCounter.objects.aggregate(Sum('counter'))['counter__sum']
    if(LabledCounter.objects.aggregate(Sum('counter'))['counter__sum'] != None):
        content_return['total_labeled_entries_in_DB'] = LabledCounter.objects.aggregate(Sum('counter'))['counter__sum']
    else:
        content_return['total_labeled_entries_in_DB'] = 0
    content_return['total_relevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`relevancy` = 'relevant' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_irrelevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`relevancy` = 'irrelevant' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_positive_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'positive' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_negative_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'negative' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_neutral_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'neutral' "}).aggregate(Sum('counter'))['counter__sum']

    # Stock DB
    try:
        content_return['stock_entries_in_DB'] = StockCounter.objects.extra(where={"`stock` = '"+stock_name+"' "}).values()[0]['counter']
    except:
        content_return['stock_entries_in_DB'] = 0
    try:
        content_return['stock_labeled_entries_in_DB'] = LabledCounter.objects.extra(where={"`stock` = '"+stock_name+"' "}).values()[0]['counter']
    except:
        content_return['stock_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_relevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `relevancy` = 'relevant' "}).values()[0]['counter']
    except:
        content_return['stock_relevant_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_irrelevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `relevancy` = 'irrelevant' "}).values()[0]['counter']
    except:
        content_return['stock_irrelevant_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_positive_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'positive' "}).values()[0]['counter']
    except:
        content_return['stock_positive_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_negative_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'negative' "}).values()[0]['counter']
    except:
        content_return['stock_negative_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_neutral_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'neutral' "}).values()[0]['counter']
    except:
        content_return['stock_neutral_labeled_entries_in_DB'] = 0
    print('Done')
    return content_return 

#@login_required
@ajax
def get_tweets_proto(request):
    stock_name = request.POST['query']
    #print(stock_name)
    content_return = {}
    #query = stock_name
    #query = synonyms[query]

    #remove the adult content
    #naughty_words=" AND ( -ﺰﺑ -ﻂﻳﺯ -ﻂﻴﻇ -ﺲﻜﺳ -ﺲﻜﺴﻳ -ﺲﺣﺎﻗ -ﺞﻨﺳ -ﻦﻴﻛ -ﺞﻨﺳ -ﺏﺯ -ﺏﺯﺍﺯ -ﻚﺳ -ﻒﺤﻟ -ﻒﺣﻮﻠﻫ -ﺬﺑ )"

    query = combination[stock_name] + " AND (سهم OR اسهم OR أسهم OR تداول OR ارتفع OR ارتفاع OR انخفض OR انخفاض OR هدف OR دعم OR ارتداد OR نسبة OR % OR %)" 
    
    '''
    #tweets = twitter.search(q= query + 'OR ' + synonyms[query], result_type='recent')
    try:
        tweets = twitter.search(q=query, result_type='recent')
    except:
        from twython import Twython
        twitter = Twython("MGMeNEK5bEqADjJRDJmQ8Yy1f", "eVR1kjrTdHPEiFuLoAEA6pPGSnuZ1NnAa1EwtqBi4wVA1tbRHo", "91079548-uhlRrwtgVQcavlf3lv4Dy1ZFCq5CXvBQFvc5A1l0n", "V6vLsqzqrdfs2YX4I1NVG2gP845gjTrBSDNxHVz496g66")
        tweets = twitter.search(q=query, result_type='recent')
    '''
    
    try:
        tweets = twitterCrawler.SearchQueryAPI(query, -1, -1)
    except:        
        PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
        configFileCrawler = os.path.join(PROJECT_DIR, 'TwitterCrawler','Configurations', 'Configurations.xml')
        twitterCrawler = TwitterCrawler(configFileCrawler, None, None, None)
        tweets = twitterCrawler.SearchQueryAPI(query, -1, -1)

    price = 0  
    #price = get_stock_price(stock_name)
    try:
        #import sys
        #import codecs
        #sys.stdout = codecs.getwriter("iso-8859-1")(sys.stdout, 'xmlcharrefreplace')
        price = StocksPrices.objects.filter(stock_name=""+str(stock_name.encode("utf-8"))+"").order_by('-id')[0].stock_price
        print('Price in DB')
    except:
        price = get_stock_price(stock_name)
        print('Getting price')
    from django.utils import timezone 
    content_return['price'] = price
    #tweets['price'] = CorrectionData.objects.get(stock_name=query)
    print('Saving tweets')
    for tweet in tweets:
        tweet_exist = Opinion.objects.filter(twitter_id=tweet['id_str']);
        if(len(tweet_exist) == 0):
            try:
                item = Opinion()
                item.twitter_id = tweet['id_str']
                item.user_id = tweet['user']['id']
                item.text = tweet['text']
                item.created_at = tweet['created_at']
                item.user_followers_count = tweet['user']['followers_count']
                item.user_profile_image_url = tweet['user']['profile_image_url']
                item.media_url = tweet['entities']
                item.tweeter_sname = tweet['user']['screen_name']
                item.tweeter_name = tweet['user']['name']
                #print('kkkkkkk'+str(tweet['entities']))
                item.pub_date = str(timezone.now())
                item.stock = stock_name
                item.labeled = False
                item.source = "twitter.com"
                if ' ﺰﺑ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻴﻇ ' in tweet['text'] and ' ﺲﻜﺳ ' in tweet['text'] and ' ﺲﻜﺴﻳ ' in tweet['text'] and ' ﺲﺣﺎﻗ ' in tweet['text'] and ' ﺞﻨﺳ ' in tweet['text'] and ' ﺏﺯ ' in tweet['text'] and ' ﺏﺯﺍﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻂﻳﺯ ' in tweet['text'] and ' ﻚﺳ ' in tweet['text'] and ' ﻒﺤﻟ ' in tweet['text'] and ' ﻒﺣﻮﻠﻫ ' in tweet['text'] and ' ﺬﺑ ' in tweet['text']:
                    print(tweet['text'])
                else:
                    item.save()
                item.relevancy = 'none'
                item.sentiment = 'none'
                item.labeled_user = 'none'
            except Exception as e: 
              pass
    print('Tweets saved')
    tweetes_to_render_temp = Opinion.objects.filter(stock=stock_name, labeled = False).values() 
    tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True)[0:150];
    #tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True);
    #my_list = list(tweetes_to_render)
    #print(json.dumps(my_list[0]))
    #tweetes_to_render_temp = Opview.objects.filter(stock=stock_name, labeled = False).values();
    #tweetes_to_render = sorted(tweetes_to_render_temp, key=lambda x: time.strptime(x['created_at'],'%a %b %d %X %z %Y'), reverse=True);

    #prevent Duplicate 
    tweets_dict = {}
    tweets_dict[''] = ''
    i = 1
    x = 0
    print('Handling duplicates')
    while x < min(50, len(tweetes_to_render)):
        
        try:
            tweet_render=tweetes_to_render[x];
                                
            # Get the tweet by ID 
            retrievedTweet = dict(twitterCrawler.GetSingleTweetByID(tweet_render.get('twitter_id')))
            
            # Update the text in the tweet data
            tweet_text = retrievedTweet['text']
            tweet_render['text'] = tweet_text
            if tweet_text.strip() in tweets_dict.keys():
                tweet = Opinion.objects.filter(twitter_id=tweet_render.get('twitter_id'))[0]
                tweet.similarId = tweets_dict[tweet_render['text']]
                tweet.save()
                tweetes_to_render.pop(x); 
                if (len(tweetes_to_render_temp) > 50+i):
                    tweetes_to_render.append(tweetes_to_render_temp[49+i])
                    i=i+1
            elif(tweet_render.get('labeled_user') == request.user.username or tweet_render.get('labeled_user_second') == request.user.username):
                tweetes_to_render.remove(tweet_render)
                if (len(tweetes_to_render_temp) > 50+i):
                    tweetes_to_render.append(tweetes_to_render_temp[49+i])
                    i=i+1
            else:
                x=x+1
                tweets_dict[tweet_render.get('text').strip()] = tweet_render.get('twitter_id')

        except Exception as e:
            # Rate limit exceeded
            print('Error: ' + str(e)) 
            if('Twitter sent status 429' in str(e)):
                # Sleep 15 min, only 180 calls permitted per 15 min
                time.sleep(900)

    content_return['statuses'] = tweetes_to_render[0:50]
    
    print('Start stats')
    # Fill in total number of entries in DB for this stock
    # Full DB
    content_return['total_entries_in_DB'] = StockCounter.objects.aggregate(Sum('counter'))['counter__sum']
    if(LabledCounter.objects.aggregate(Sum('counter'))['counter__sum'] != None):
        content_return['total_labeled_entries_in_DB'] = LabledCounter.objects.aggregate(Sum('counter'))['counter__sum']
    else:
        content_return['total_labeled_entries_in_DB'] = 0
    content_return['total_relevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`relevancy` = 'relevant' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_irrelevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`relevancy` = 'irrelevant' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_positive_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'positive' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_negative_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'negative' "}).aggregate(Sum('counter'))['counter__sum']
    content_return['total_neutral_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`sentiment` = 'neutral' "}).aggregate(Sum('counter'))['counter__sum']

    # Stock DB
    try:
        content_return['stock_entries_in_DB'] = StockCounter.objects.extra(where={"`stock` = '"+stock_name+"' "}).values()[0]['counter']
    except:
        content_return['stock_entries_in_DB'] = 0
    try:
        content_return['stock_labeled_entries_in_DB'] = LabledCounter.objects.extra(where={"`stock` = '"+stock_name+"' "}).values()[0]['counter']
    except:
        content_return['stock_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_relevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `relevancy` = 'relevant' "}).values()[0]['counter']
    except:
        content_return['stock_relevant_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_irrelevant_labeled_entries_in_DB'] = RelevancyCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `relevancy` = 'irrelevant' "}).values()[0]['counter']
    except:
        content_return['stock_irrelevant_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_positive_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'positive' "}).values()[0]['counter']
    except:
        content_return['stock_positive_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_negative_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'negative' "}).values()[0]['counter']
    except:
        content_return['stock_negative_labeled_entries_in_DB'] = 0
    try:
        content_return['stock_neutral_labeled_entries_in_DB'] = SentimentCounter.objects.extra(where={"`stock` = '"+stock_name+"' and `sentiment` = 'neutral' "}).values()[0]['counter']
    except:
        content_return['stock_neutral_labeled_entries_in_DB'] = 0
    print('Done')
    return content_return 


def getSimilarlabeling():
    duplicate_tweetes = Opinion.objects.exclude(similarId='').values();
    for tweet in duplicate_tweetes:
        parent_tweet =  Opinion.objects.filter(twitter_id = tweet.get("similarId"))
        tweet["voted_relevancy"] = parent_tweet.parent_tweet
        tweet["voted_sentiment"] = parent_tweet.voted_sentiment
        tweet.save()

@ajax
def get_correction(request):
    relevancy = request.POST['relevancy']
    sentiment = request.POST['sentiment']
    tweet_id = request.POST['tweet_id']
    stock_name = request.POST['stock']
    #print(tweet_id)
    
    try:
        tweet = Opinion.objects.filter(twitter_id=tweet_id, stock=stock_name)[0]
        if(relevancy == 'none' or relevancy == None):
            if(tweet.sentiment == 'none' or tweet.sentiment == '' or tweet.sentiment==None):
                tweet.sentiment = sentiment
                tweet.voted_sentiment = sentiment
            elif(tweet.sentiment_second == 'none' or tweet.sentiment_second == '' or tweet.sentiment_second == None):
                tweet.sentiment_second = sentiment
                if(tweet.sentiment == tweet.sentiment_second):
                    tweet.voted_sentiment = sentiment
            elif(tweet.sentiment_third == 'none' or tweet.sentiment_third == '' or tweet.sentiment_third ==  None):
                tweet.sentiment_third = sentiment
                if(tweet.voted_sentiment == 'none' or tweet.voted_sentiment =='' or tweet.voted_sentiment == None):
                    if(sentiment == tweet.sentiment):
                        tweet.voted_sentiment = sentiment
                    elif(sentiment == tweet.sentiment_second):
                        tweet.voted_sentiment = sentiment
                    else:
                        tweet.voted_sentiment = None

            #print('Sentiment')
        elif (sentiment == 'none' or sentiment == None):
            if(tweet.relevancy == 'none' or tweet.relevancy == '' or tweet.relevancy == None):
                tweet.relevancy = relevancy
                if request.user.is_authenticated():
                    tweet.labeled_user = request.user.username
            elif(tweet.relevancy_second == 'none' or tweet.relevancy_second == '' or tweet.relevancy_second == None):
                tweet.relevancy_second = relevancy
                if request.user.is_authenticated():
                    tweet.labeled_user_second = request.user.username
            elif(tweet.relevancy_third == 'none' or tweet.relevancy_third == '' or tweet.relevancy_third ==  None):
                tweet.relevancy_third = relevancy
                if request.user.is_authenticated():
                    tweet.labeled_user_third = request.user.username
            #print('Relevance')

        if(((tweet.relevancy != 'none') & (tweet.relevancy != '') & (tweet.relevancy != None)) & ((tweet.sentiment != 'none') & (tweet.sentiment != '') & (tweet.sentiment != None))
            & ((tweet.relevancy_second != 'none') & (tweet.relevancy_second != '') & (tweet.relevancy_second != None)) & ((tweet.sentiment_second != 'none') & (tweet.sentiment_second != '')& (tweet.sentiment_second != None))
            & ((tweet.relevancy_third != 'none') & (tweet.relevancy_third != '') & (tweet.relevancy_third != None)) & ((tweet.sentiment_third != 'none') & (tweet.sentiment_third != '') & (tweet.sentiment_third != None))):
            tweet.labeled = True
            tweet.manual_labeled = True
            x = 0
            y = 0
            z = 0
            if(tweet.relevancy == 'relevant'):
                x = 1
            if(tweet.relevancy_second == 'relevant' ):
                y = 1
            if(tweet.relevancy_third == 'relevant' ):
                z = 1
            tweet.voted_relevancy = ((x & y) | (x & z) | (y & z))
            #print(tweet.votel_relevancy)
        tweet.save() 

    except Exception as e:
        print('Unexpected error')

    #tweet.save()
    #retrain()

def correction_sentiment(request):
    relevancy = request.POST['relevancy']
    sentiment = request.POST['sentiment']
    text = request.POST['text']
    stock = request.POST['stock']
    
    try:
        correctionData = CorrectionData.objects.get(text=text)
        correctionData.relevancy = relevancy
    except:
        correctionData = CorrectionData(text=text,relevancy=relevancy,sentiment='neutral',stock=stock)

    
    correctionData.save()
    
   
        
def retrain():
    correctionData = CorrectionData.objects.all()
    trainSet= []
    for item in correctionData:
        trainSet.append({'label' : item.relevancy, 'text' :item.text })

    filter = Filter(r"C:\Users\Tarek Abdelhakim\workspace\DjangoWebProject1",item.stock.strip(),True)
    filter.GetBestClassifier(trainSet)
    

@login_required
def news(request):
    #Select Today's News 
    from django.utils import timezone
    today =datetime.datetime.strftime(timezone.now(),"%Y-%m-%d")
    newsList=Opinion.objects.extra(where={"`pub_date` LIKE CONCAT(  '%%',  '"+today+"',  '%%' ) and `source` != 'twitter.com' "}).values()
    
    News =[]
    for newsItem in newsList:
        n=NewsItem()
        n.link = newsItem['source']
        n.title = newsItem['text']
        News.append(n)
    """Renders the news page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/news.html',
        context_instance = RequestContext(request,
        {
            'title':'News',
            'News':News,
        })
    )


def runPriceCrawling():
    urlstr = 'http://www.marketstoday.net/markets/%D8%A7%D9%84%D8%B3%D8%B9%D9%88%D8%AF%D9%8A%D8%A9/Companies/1/ar/'
    fileHandle = urllib.request.urlopen(urlstr)
    html = fileHandle.read()
    soup = BeautifulSoup(html)
    #print(soup)
    from pytz import timezone 
    localtz = timezone('UTC')
    time_in_site=localtz.localize(parse(soup.findAll('span', attrs={'class':'tradhour'})[0].text.split('\n', 1)[1].split(" :")[1].replace('(local time)\n','',1)));
    for b in soup.findAll('tr', attrs={'class':'symbolflip'})[1:]:
        stockname=b.find('a', attrs={'class':'jTip'}).text
        price=b.findAll('td')[1].text
        #print(price_mapping[stockname])
        #print(price)
        try:
            item = StocksPrices()
            item.stock_name=price_mapping[stockname]
            item.stock_price=price
            item.time=time_in_site
            item.save()
        except:
            pass
    return True

def runNewsCrawling():
    rssPage = urllib.request.urlopen('http://www.cma.org.sa/Ar/News/_layouts/listfeed.aspx?List=%7B0622219A-483C-46C4-A066-AA4EDEDD0952%7D')
    rssFeed = minidom.parse(rssPage)

    for item in rssFeed.getElementsByTagName("item"):
        Op = Opinion()
        for a in item.getElementsByTagName("link"):
            Op.source=a.childNodes[1].nodeValue        
        for a in item.getElementsByTagName("title"):
            Op.text=a.childNodes[1].nodeValue
        #for a in item.getElementsByTagName("pubDate"):
        #    Op.pub_date=a.childNodes[0].nodeValue
        Op.pub_date= str(datetime.datetime.utcnow())
        Op.twitter_id = str(datetime.datetime.utcnow())
        Op.user_id = 'none'
        Op.created_at = 'none'
        Op.user_followers_count = 0
        Op.user_profile_image_url = 'none'
        Op.media_url= 'none'
        Op.stock = 'none'
        Op.labeled = False
        Op.relevancy = 'none'
        Op.sentiment = 'none'
        Op.labeled_user= 'none'
        Op.save()
    #Time by seconds
    threading.Timer(86400.0, runNewsCrawling).start()

#Crawl the News every 24 hours
runNewsCrawling()


@login_required
def contact(request):
    """Renders the contact page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/contact.html',
        context_instance = RequestContext(request,
        {
            'title':'Contact',
            'message':'Your contact page.',
            'year':datetime.datetime.now().year,
        })
    )

@login_required
def about(request):         
    """Renders the about page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/about.html',
        context_instance = RequestContext(request,
        {
            'title':'About',
            'message':'Your application description page.',
            'year':datetime.datetime.now().year,
        })
    )

def login_user_proto(request):
    
    oauth = OAuth1(consumerKey, client_secret=consumerSecret)
    r = requests.post(url=request_token_url, auth=oauth)
    credentials = urllib_parse.parse_qs(r.content.decode("utf-8"))
    resource_owner_key = credentials.get('oauth_token')[0]
    resource_owner_secret = credentials.get('oauth_token_secret')[0]
    
    #full_auth_url = authenticate_url + '?oauth_token=' + resource_owner_key
    #authorization_url = oauth.authorization_url(base_authorization_url)
    full_auth_url = base_authorization_url + '?oauth_token=' + resource_owner_key
    request.session['request_token'] = str(resource_owner_key)
    return redirect(full_auth_url)    
    
    '''
    if request.method == 'POST':
        #logout(request)
        username = request.POST['username']
        password = request.POST['password']

        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                return redirect('/home_proto')
                #return HttpResponseRedirect('/about/')
    return redirect('/')
    '''
def twitter_authenticated(request):
    if request.method == 'GET':

        accessToken = request.GET['oauth_token']
        accessTokenVerifier = request.GET['oauth_verifier']
        accessTokenSecret = request.session.get('request_token', None)
        '''
        oauth = OAuth1(consumerKey, client_secret=consumerSecret)
        r = requests.post(url=request_token_url, auth=oauth)
        credentials = urllib_parse.parse_qs(r.content.decode("utf-8"))
        resource_owner_key = credentials.get('oauth_token')[0]
        resource_owner_secret = credentials.get('oauth_token_secret')[0]
    
        oauth = OAuth1(client_key=consumerKey, client_secret=consumerSecret, resource_owner_key=resource_owner_key, resource_owner_secret=resource_owner_secret)
        r = requests.post(url=access_url, auth=oauth)
        
        access_token_from_url = urllib_parse.parse_qs(r.content.decode("utf-8"))
        
        
        username = access_token_from_url['screen_name']
        '''
        '''
        oauth = OAuth1(consumerKey, client_secret=consumerSecret)
        r = requests.post(url=request_token_url, auth=oauth)
        credentials = urllib_parse.parse_qs(r.content.decode("utf-8"))
        resource_owner_key = credentials.get('oauth_token')[0]
        resource_owner_secret = credentials.get('oauth_token_secret')[0]
        #from requests_oauthlib import OAuth1Session
        oauth = OAuth1(consumerKey,
                              client_secret=consumerSecret,
                              resource_owner_key=resource_owner_key,
                              resource_owner_secret=resource_owner_secret,
                              verifier=accessTokenVerifier)
        
        #oauth_tokens = oauth.fetch_access_token(access_url)
        r = requests.post(url=access_url, auth=oauth)
        
        access_token_from_url = urllib_parse.parse_qs(r.content.decode("utf-8"))
        username = access_token_from_url['screen_name']
        #password = oauth_tokens['oauth_token_secret']
        password = accessTokenSecret
        '''
        oauth = OAuth1(consumerKey,
                       client_secret=consumerSecret,
                       resource_owner_key=accessToken,
                       resource_owner_secret=accessTokenSecret,
                       verifier=accessTokenVerifier)

        r = requests.post(url=access_url, auth=oauth)
        credentials = urllib_parse.parse_qs(r.content.decode("utf-8"))
        resource_owner_key = credentials.get('oauth_token')[0]
        resource_owner_secret = credentials.get('oauth_token_secret')[0]
        '''
        See http://requests-oauthlib.readthedocs.org/en/latest/oauth1_workflow.html#workflow-example-showing-use-of-both-oauth1-and-oauth1session
        >>> protected_url = 'https://api.twitter.com/1/account/settings.json'
        
        >>> # Using OAuth1Session
        >>> oauth = OAuth1Session(client_key,
                                  client_secret=client_secret,
                                  resource_owner_key=resource_owner_key,
                                  resource_owner_secret=resource_owner_secret)
        >>> r = oauth.get(protected_url)
        
        >>> # Using OAuth1 auth helper
        >>> oauth = OAuth1(client_key,
                           client_secret=client_secret,
                           resource_owner_key=resource_owner_key,
                           resource_owner_secret=resource_owner_secret)
        >>> r = requests.get(url=protected_url, auth=oauth)
        '''        
        
        t = Twitter(auth=OAuth(resource_owner_key,resource_owner_secret, consumerKey,consumerSecret))
        results = t.account.verify_credentials()
        username = results['screen_name']
        #password = resource_owner_secret
        #user = authenticate(username=username, password=password)
        from app.models import User
        
        try:
            user = User.objects.get(username=username)
            return redirect('/home_proto') 
               
        except User.DoesNotExist:
            return render(
                            request,
                            'app/signup.html',
                            context_instance = RequestContext(request,
                            {
                                'twitter_username':username,
                            }))
    

        
def login_user(request):

    if request.method == 'POST':
        #logout(request)
        username = request.POST['username']
        password = request.POST['password']

        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                return redirect('/home')
                #return HttpResponseRedirect('/about/')
    return redirect('/register')

def twitter_register(request):
    
    if request.method == 'POST':
        from app.forms import UserForm
        user_form = UserForm(data=request.POST)
        #user_form.data['username'] = request.session.get('twitter_username', None)
        from app.models import User
        if user_form.is_valid() :
            user = user_form.save()

            user.set_password(user.password)
            user.save()
            new_user = User()
            new_user.username = request.POST['username']
            new_user.email = request.POST['email']
            new_user.save()
            #request.session['message'] = 'registration done please login'
            return redirect("/home_proto")
            #return render(request, 'app/site_layout.html', {'message':'registration done please login'})
        else:
            request.session['error'] = user_form.errors
            #return redirect("/prototype")
            return render(request, 'app/signup.html', {'error':user_form.errors})

def register(request):
    
    if request.method == 'POST':
        from app.forms import UserForm
        user_form = UserForm(data=request.POST)

        if user_form.is_valid() :
            user = user_form.save()

            user.set_password(user.password)
            user.save()

            request.session['message'] = 'registration done please login'
            return redirect("/")
            #return render(request, 'app/site_layout.html', {'message':'registration done please login'})
        else:
            request.session['error'] = user_form.errors
            return redirect("/")
           #return render(request, 'app/site_layout.html', {'error':user_form.errors})

